<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - filesystem</title>
	<link href="https://crab2313.github.io/tags/filesystem/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2018-01-07T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/filesystem/atom.xml</id>
	<entry xml:lang="en">
		<title>inode权限检查</title>
		<published>2018-01-07T00:00:00+00:00</published>
		<updated>2018-01-07T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/inode-permission/" type="text/html"/>
		<id>https://crab2313.github.io/inode-permission/</id>
		<content type="html">&lt;h1 id=&quot;inode-permissionhan-shu&quot;&gt;inode_permission函数&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;inode_permission&lt;&#x2F;code&gt;函数用于对inode进行权限检查，我们传给其一个mask参数，这个参数是一个bitmap，主要有三个标志：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MAY_READ：inode是否可读&lt;&#x2F;li&gt;
&lt;li&gt;MAY_WRITE：inode是否可写&lt;&#x2F;li&gt;
&lt;li&gt;MAY_EXEC：inode是否可执行（对于文件夹来说意味着是否可以访问文件夹下的文件或文件夹）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果该函数的返回值为0，说明检查通过。&lt;code&gt;inode_permission&lt;&#x2F;code&gt;所做的检查主要分为两个部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;文件系统级别检查&lt;&#x2F;li&gt;
&lt;li&gt;inode级别检查&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;文件系统级别检查主要是检查文件系统一级的权限，这里只考虑一种情况：文件系统只读，代码如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mask &amp;amp; MAY_WRITE)) {
                umode_t mode = inode-&amp;gt;i_mode;

                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Nobody gets write access to a read-only fs. *&#x2F;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((sb-&amp;gt;s_flags &amp;amp; MS_RDONLY) &amp;amp;&amp;amp;
                    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S_ISREG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mode) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S_ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mode) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S_ISLNK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mode)))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-EROFS;
        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是说，如果文件系统只读，并且该inode的类型是普通文件、文件夹、链接，那么这个inode是不可写的，注意这里设备文件不受影响。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;inode-permissionhan-shu-1&quot;&gt;__inode_permission函数&lt;&#x2F;h1&gt;
&lt;p&gt;inode级别的检查由&lt;code&gt;__inode_permission&lt;&#x2F;code&gt;函数进行，这个函数首先确保两个情况下inode不能写入：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;inode的标志inode-&amp;gt;i_flags中存在&lt;code&gt;S_IMMUTABLE&lt;&#x2F;code&gt;标志&lt;&#x2F;li&gt;
&lt;li&gt;inode的&lt;code&gt;i_uid&lt;&#x2F;code&gt;或者&lt;code&gt;i_gid&lt;&#x2F;code&gt;非法，这会使得更新mtime的时候将错误的信息写回去。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;接下来通过三个不同的函数检查权限：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;do_inode_permission&lt;&#x2F;li&gt;
&lt;li&gt;devcgroup_inode_permission&lt;&#x2F;li&gt;
&lt;li&gt;security_inode_permission&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;devcgroup_inode_permission涉及到了cgroup子系统，security_inode_permission涉及到LSM子系统，这里不多讲。来看&lt;code&gt;do_inode_permission&lt;&#x2F;code&gt;函数，这个函数首先检查inode-&amp;gt;op是否有.permission函数指针，如果有，直接调用这个函数指针，如果没有则调用通用的检查函数&lt;code&gt;generic_permission&lt;&#x2F;code&gt;。事实上这段代码被运行的频率非常高，需要重点优化，所以使用inode-&amp;gt;i_opflags中的一个&lt;code&gt;IOP_FASTPERM&lt;&#x2F;code&gt;标志表明i_op-&amp;gt;permission是否为NULL，这个缓存使得下次操作不用再次检查。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static inline int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_inode_permission&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; inode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!(inode-&amp;gt;i_opflags &amp;amp; IOP_FASTPERM))) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;likely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode-&amp;gt;i_op-&amp;gt;permission))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; inode-&amp;gt;i_op-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;permission&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode, mask);

                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* This gets set once for the inode lifetime *&#x2F;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;inode-&amp;gt;i_lock);
                inode-&amp;gt;i_opflags |= IOP_FASTPERM;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;inode-&amp;gt;i_lock);
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generic_permission&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode, mask);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;generic-permissionhan-shu&quot;&gt;generic_permission函数&lt;&#x2F;h1&gt;
&lt;p&gt;只要inode没有单独实现自己的inode-&amp;gt;op-&amp;gt;permission操作，那么就会使用默认&lt;code&gt;generic_permission&lt;&#x2F;code&gt;进行权限检查。这个函数首先调用&lt;code&gt;acl_permission_check&lt;&#x2F;code&gt;进行基本的权限检查，然后处理capabilities。&lt;code&gt;acl_permission_check&lt;&#x2F;code&gt;主要做了如下检查：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果fsuid与inode-&amp;gt;i_uid相同，那么直接比较inode-&amp;gt;i_mode中与user相关三位和mask是否匹配&lt;&#x2F;li&gt;
&lt;li&gt;如果fsuid与inode-&amp;gt;i_uid不相同，并且inode所在的文件系统支持POSIX_ACL，那么检查POSIX_ACL，如果检索有结果（无论是允许还是阻止），都会直接返回该结果&lt;&#x2F;li&gt;
&lt;li&gt;如果fsuid与inode-&amp;gt;i_uid不相同，并且POSIX_ACL没有检索结果（包括inode所在文件系统不支持POSIX ACL的情况），但是当前进程属于inode-&amp;gt;i_gid代表的group，那么比较inode-&amp;gt;i_mode中与group相关的三位和mask是否匹配&lt;&#x2F;li&gt;
&lt;li&gt;上述条件都不满足的情况下，比较inode-&amp;gt;i_mode中与other相关的三位和mask是否匹配&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;当&lt;code&gt;acl_permission_check&lt;&#x2F;code&gt;认定当前进程没有权限对inode进行由mask代表的操作时，&lt;code&gt;generic_permission&lt;&#x2F;code&gt;才会继续进行capabilities的检查。涉及到inode权限的capabilities有两个：CAP_DAC_OVERRIDE和CAP_DAC_READ_SEARCH。CAP_DAC_OVERRIDE可以让进程（几乎）无视文件设置的三组权限位，而CAP_DAC_READ_SEARCH赋予进程搜索文件夹和读取文件的权限。由于文件夹的三组权限位与普通文件表示的意义是不一样的，所以这两个capability的行为也是不同的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S_ISDIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode-&amp;gt;i_mode)) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* DACs are overridable for directories *&#x2F;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capable_wrt_inode_uidgid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode, CAP_DAC_OVERRIDE))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!(mask &amp;amp; MAY_WRITE))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capable_wrt_inode_uidgid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode,
                                                     CAP_DAC_READ_SEARCH)
)
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-EACCES;
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
         * Read&#x2F;write DACs are always overridable.
         * Executable DACs are overridable when there is
         * at least one exec bit set.
         *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!(mask &amp;amp; MAY_EXEC) || (inode-&amp;gt;i_mode &amp;amp; S_IXUGO))
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capable_wrt_inode_uidgid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode, CAP_DAC_OVERRIDE))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
         * Searching includes executable on directories, else just read.
         *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        mask &amp;amp;= MAY_READ | MAY_WRITE | MAY_EXEC;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mask == MAY_READ)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capable_wrt_inode_uidgid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(inode, CAP_DAC_READ_SEARCH))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于文件夹：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CAP_DAC_OVERRIDE直接pass&lt;&#x2F;li&gt;
&lt;li&gt;CAP_DAC_READ_SEARCH允许MAY_READ和MAY_EXEC&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对于普通文件：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CAP_DAC_OVERRIDE对待MAY_EXEC是不同的：如果mask中出现了MAY_EXEC，那么只有三组权限位中至少有一个X位被设置的时候才pass，其余情况全pass。&lt;&#x2F;li&gt;
&lt;li&gt;CAP_DAC_READ_SEARCH只允许MAY_READ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
