<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - kdump</title>
	<link href="https://crab2313.github.io/tags/kdump/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2019-11-22T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/kdump/atom.xml</id>
	<entry xml:lang="en">
		<title>kdump工作机制分析</title>
		<published>2019-11-22T00:00:00+00:00</published>
		<updated>2019-11-22T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/kdump/" type="text/html"/>
		<id>https://crab2313.github.io/kdump/</id>
		<content type="html">&lt;h2 id=&quot;kdumpctl&quot;&gt;kdumpctl&lt;&#x2F;h2&gt;
&lt;p&gt;kdumpctl是一个shell脚本，用于查看当前kdump的状态和进行kdump相关操作。kdumpctl的入口是main函数，从中可以看到下列命令行参数：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命令&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;start&lt;&#x2F;td&gt;&lt;td&gt;执行capture内核装入&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stop&lt;&#x2F;td&gt;&lt;td&gt;卸载capture内核&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;status&lt;&#x2F;td&gt;&lt;td&gt;显示kdump状态&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;restart&lt;&#x2F;td&gt;&lt;td&gt;stop + start&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;propagate&lt;&#x2F;td&gt;&lt;td&gt;将配置文件中设置的ssh-key通过ssh-copy-id拷贝到目标服务器&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;showmem&lt;&#x2F;td&gt;&lt;td&gt;显示内核为dump预留的内存大小&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;首先明确kdumpctl可以工作在两种模式下：kdump和fadump，这里只提kdump模式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;statusming-ling&quot;&gt;status命令&lt;&#x2F;h3&gt;
&lt;p&gt;status命令直接显示当前是否已经装载了capture内核。具体操作为读取&lt;code&gt;&#x2F;sys&#x2F;kernel&#x2F;kexec_crash_loaded&lt;&#x2F;code&gt;文件，如果文件内容为1则认为capture内核已经装载。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;showmemming-ling&quot;&gt;showmem命令&lt;&#x2F;h3&gt;
&lt;p&gt;即内核为kdump保留的内存空间。从&lt;code&gt;&#x2F;sys&#x2F;kernel&#x2F;kexec_crash_size&lt;&#x2F;code&gt;中读取。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;startming-ling&quot;&gt;start命令&lt;&#x2F;h3&gt;
&lt;p&gt;这里应该是开启kdump服务的操作。但是如果内核的proc中存在&lt;code&gt;&#x2F;proc&#x2F;vmcore&lt;&#x2F;code&gt;，即当前内核为capture内核，则会进行保存core文件的操作。在primary内核中，会进行启动操作，在操作前会进行一系列检查：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;检查内核当前是否支持kdump，操作与status命令一致&lt;&#x2F;li&gt;
&lt;li&gt;检查内核是否为kdump保留了内存空间，操作与showmem命令一致&lt;&#x2F;li&gt;
&lt;li&gt;检查配置文件&lt;code&gt;&#x2F;etc&#x2F;kdump.conf&lt;&#x2F;code&gt;是否合法&lt;&#x2F;li&gt;
&lt;li&gt;检查raw选项配置的硬盘分区中是否保存有上次生成的内核dump，如果有则将其取出保存在默认目录，并清空该分区&lt;&#x2F;li&gt;
&lt;li&gt;如果设置了通过ssh远程保存内核dump，则需要检查ssh服务器是否可用&lt;&#x2F;li&gt;
&lt;li&gt;检查是否需要重新生成capture kernel使用的initrd，如果需要则进行重新生成&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最后则进行kdump内核装载操作。该操作实际上就是调用了kexec工具，如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$KEXEC $KEXEC_ARGS $standard_kexec_args \
		--commandl-line=&amp;quot;$KDUMP_COMMANDLINE&amp;quot; \
		--initrd=$TARGET_INITRD $dump_kernel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意到一点是准备内核命令行时加入了&lt;code&gt;disable_cpu_apicid&lt;&#x2F;code&gt;参数，其他没有什么值的注意的了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stopming-ling&quot;&gt;stop命令&lt;&#x2F;h3&gt;
&lt;p&gt;这个命令就是简单的调用&lt;code&gt;kexec -p -u&lt;&#x2F;code&gt;将装入的内核卸载。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;propagateming-ling&quot;&gt;propagate命令&lt;&#x2F;h3&gt;
&lt;p&gt;调用ssh-copy-id将&lt;code&gt;kdump.conf&lt;&#x2F;code&gt;文件中配置的ssh-key上传到目标服务器中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;capture-kernel-initrdsheng-cheng&quot;&gt;capture kernel initrd生成&lt;&#x2F;h3&gt;
&lt;p&gt;该过程在rebuild_kdump_initrd中进行，主要调用如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$MKDUMPRD $TARGET_INITRD $dump_kver
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中$MKDUMPRD为&lt;code&gt;&#x2F;sbin&#x2F;mkdumprd -f&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kexec-tools&quot;&gt;kexec-tools&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kexecgong-ju-dai-ma-zu-zhi&quot;&gt;kexec工具代码组织&lt;&#x2F;h3&gt;
&lt;p&gt;首先明确该工具有两种典型的应用场景：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;普通场景，即kexec的设计初衷：从现在运行的内核加载新内核&lt;&#x2F;li&gt;
&lt;li&gt;crash模式，即通过kexec获取当前运行内核的coredump信息&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在该工具中的代码中，用运行kexec_load系统调用时的flags参数里的&lt;code&gt;KEXEC_ON_CRASH&lt;&#x2F;code&gt;标志区分两种情况：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(info-&amp;gt;kexec_flags &amp;amp; KEXEC_ON_CRASH) {
	...
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在本文中只分析crash模式下kexec工具的行为。除此之外，该工具高度与运行平台的架构相关，需要注意区分平台相关与平台无关的代码。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file_type file_type[] = {
	{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vmlinux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, elf_arm64_probe, elf_arm64_load, elf_arm64_usage},
	{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, image_arm64_probe, image_arm64_load, image_arm64_usage},
	{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, uImage_arm64_probe, uImage_arm64_load, uImage_arm64_usage},
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;struct file_type&lt;&#x2F;code&gt;描述当前体系结构下支持的内核文件格式。probe函数用于验证内核文件合法性，load用于装载内核。后续只分析ELF格式的内核装载。&lt;&#x2F;p&gt;
&lt;p&gt;内核对于kexec特性一共提供了两个系统调用：kexec_load与kexec_file_load，本文重点分析kexec_load。由于kexec_file_load的接口较为简单，其功能主要实现在内核态，该系统调用会在内核代码分析部分提到。kexec_file_load系统调用可以由&lt;code&gt;-s&lt;&#x2F;code&gt;命令行参数强行启用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;kexec_load&lt;&#x2F;code&gt;系统调用原型如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static inline long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;kexec_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nr_segments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kexec_segment *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;segments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中entry为指向跳转地址的指针，&lt;code&gt;segments&lt;&#x2F;code&gt;为一个kexec_segment类型的数组，flags在crash模式下一定要设置&lt;code&gt;KEXEC_ON_CRASH&lt;&#x2F;code&gt;标志。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kexec_segment {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*buf;
	size_t bufsz;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*mem;
	size_t memsz;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;kexec_segment&lt;&#x2F;code&gt;类型数组的目的是向内核描述一串内存区域，其元素的组织为：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;buf &amp;amp;&amp;amp; bufsz： 用户态缓冲区及其长度&lt;&#x2F;li&gt;
&lt;li&gt;mem &amp;amp;&amp;amp; memsz： 物理内存起始地址及其长度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这个参数的目的是让内核将用户态缓冲区的内容拷贝到物理地址中，因此kexec工具的主要功能就如同一个bootloader，通过kexec_load系统调用将特定内存装载到特定物理地址，然后跳转到entry指针指向的内存执行。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bi-yao-xin-xi-de-cai-ji&quot;&gt;必要信息的采集&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;crash_get_memory_ranges&lt;&#x2F;code&gt;函数实际上描述如何parse当前系统物理内存layout。函数实质上会输出三个信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;system_memory_rgns&lt;&#x2F;li&gt;
&lt;li&gt;usablemem_rgns&lt;&#x2F;li&gt;
&lt;li&gt;elf_info&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;system_memory_rgns和usablemem_rgns是&lt;code&gt;struct memory_ranges&lt;&#x2F;code&gt;类型的数据，其结构简单易懂不再赘述。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;memory_ranges {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; size;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; max_size;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;memory_range *ranges;
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;memory_range {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; start, end;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; type;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_RAM	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_RESERVED	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_ACPI	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_ACPI_NVS	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_UNCACHED	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_PMEM		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;RANGE_PRAM		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数简单读取&lt;code&gt;&#x2F;proc&#x2F;iomem&lt;&#x2F;code&gt;文件内容，对其进行解析：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!usablemem_rgns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kexec_iomem_for_each_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, iomem_range_callback, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对该文件每一个条目，调用&lt;code&gt;iomem_range_callback&lt;&#x2F;code&gt;进行处理。该函数将遇到的&lt;code&gt;System RAM&lt;&#x2F;code&gt;区域保存在&lt;code&gt;system_memory_rgns&lt;&#x2F;code&gt;，将&lt;code&gt;Crash kernel&lt;&#x2F;code&gt;区域保存在&lt;code&gt;usablemem_rgns&lt;&#x2F;code&gt;里。函数中可以通过计算得到elf_info的一些字段，elf_info最后用于创建elf文件的header。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;crash_elf_info {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; class;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; data;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; machine;

	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; page_offset;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kern_vaddr_start;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kern_paddr_start;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kern_size;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; lowmem_limit;

	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*get_note_info)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cpu, uint64_t *addr, uint64_t *len);
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;kern_paddr_start&lt;&#x2F;code&gt;即内核的物理起始地址设置为&lt;code&gt;Kernel code&lt;&#x2F;code&gt;内存区域的起始地址。内核的长度即&lt;code&gt;kern_size&lt;&#x2F;code&gt;可以通过&lt;code&gt;Kernel data&lt;&#x2F;code&gt;的结尾地址减去&lt;code&gt;Kernel code&lt;&#x2F;code&gt;的起始地址获得。&lt;code&gt;kern_vaddr_start&lt;&#x2F;code&gt;为内核的起始虚拟地址，可以通过读取&lt;code&gt;&#x2F;proc&#x2F;kallsym&lt;&#x2F;code&gt;文件中的&lt;code&gt;_text&lt;&#x2F;code&gt;符号地址获取。理解这些参数的获取方法本质上需要理解内核在内存中的layout。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;corexin-xi-segmentzhuang-zai&quot;&gt;core信息segment装载&lt;&#x2F;h3&gt;
&lt;p&gt;首先明确core信息是什么。在capture内核执行时，并没有直接的方式获取原先crash掉的内核的内存布局，因此开发者设计了针对此情况的辅助机制。capture内核启动时，可以通过&lt;code&gt;elfcorehdr&lt;&#x2F;code&gt;命令行参数或者&lt;code&gt;&#x2F;chosen&#x2F;linux,elfcorehdr&lt;&#x2F;code&gt;设备树节点向其传递一个core类型的ELF文件header。该ELF文件header由kexec放置在crashkernel保留的内存区域中，并通过物理内存地址的方式传递给capture内核。该header以program header的形式记录了原内核运行时的内存布局以及内核crash时用于保存crash信息时的内存区域物理地址。&lt;&#x2F;p&gt;
&lt;p&gt;该操作在kexec中由&lt;code&gt;load_crashdump_segments&lt;&#x2F;code&gt;函数实现，其中的核心操作即生成ELF header由&lt;code&gt;crash_create_elf64_headers&lt;&#x2F;code&gt;函数实现。对于每一个处于运行状态的逻辑CPU都有与之对应的一片内存区域，内核crash时，会将对应于该CPU的信息（寄存器，内核栈等）保存于此。这片内存区域的物理地址与大小由：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu[N]&#x2F;crash_notes
&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu[N]&#x2F;crash_notes_size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这两个文件导出到了用户态供kexec读取。与之类似的还有vmcoreinfo：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;sys&#x2F;kernel&#x2F;vmcoreinfo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数会将这些信息以PT_NOTE的形式记录为ELF header的Program header。除此之外，还需要以PT_LOAD的形式记录内核的&lt;code&gt;System RAM&lt;&#x2F;code&gt;内存区域，这些区域可以通过枚举&lt;code&gt;&#x2F;proc&#x2F;iomem&lt;&#x2F;code&gt;文件获取。对于relocatable的内核或者实际放置地址存在偏移量的内核，仍需重复记录一遍内核占用内存区域的内存空间，即需要新增一个PT_LOAD类型的Program header，然后将其pt_vaddr设置为内核起始虚拟地址。&lt;&#x2F;p&gt;
&lt;p&gt;这个ET_CORE类型的ELF header保存在crashkernel保留的内存区域中，并创建对应的kexec_segment。后续会通过修改DTB并加入&lt;code&gt;&#x2F;chosen&#x2F;linux,elfcorehdr&lt;&#x2F;code&gt;的方式传递给capture内核。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-he-segmentzhuang-zai&quot;&gt;内核segment装载&lt;&#x2F;h3&gt;
&lt;p&gt;首先调用&lt;code&gt;arm64_locate_kernel_segment&lt;&#x2F;code&gt;函数获取内核装载的起始地址。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;		hole = (crash_reserved_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; mem_min ?
				mem_min : crash_reserved_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
		hole = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ALIGN_UP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(hole, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意ARM64内核boot协议中明确要求内核放置地址应该2M对齐。然后调用&lt;code&gt;fixup_elf_header&lt;&#x2F;code&gt;函数，目的是根据实际情况修正ELF格式内核的entry和program headers，使后续处理ELF格式文件的通用代码正确执行。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* load the kernel *&#x2F;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(info-&amp;gt;kexec_flags &amp;amp; KEXEC_ON_CRASH)
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
		 * offset addresses in elf header in order to load
		 * vmlinux (elf_exec) into crash kernel&amp;#39;s memory
		 *&#x2F;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fixup_elf_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ehdr);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们实际上要将位于&lt;code&gt;arm64_mem.phys_offset&lt;&#x2F;code&gt;物理地址上的内核搬运到&lt;code&gt;crash_reserved_mem.start&lt;&#x2F;code&gt;上，搬运偏移量为&lt;code&gt;crash_reserved_mem.start - arm64_mem.phys_offset&lt;&#x2F;code&gt;。对于ELF header里的entry地址和所有PT_LOAD类型的program header对应的虚拟地址，要加上这个偏移量，才能使后续的&lt;code&gt;elf_exec_load&lt;&#x2F;code&gt;函数将其装载到正确的物理地址上。&lt;&#x2F;p&gt;
&lt;p&gt;对于&lt;code&gt;elf_exec_load&lt;&#x2F;code&gt;函数，我们可以忽略其对&lt;code&gt;ET_DYN&lt;&#x2F;code&gt;类型ELF文件的处理，因为ELF格式的内核不是该类型的ELF文件。函数中，对于每一个PT_LOAD类型的program header，都执行如下操作：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_segment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(info,
			phdr-&amp;gt;p_data, size,
			phdr-&amp;gt;p_paddr + base, phdr-&amp;gt;p_memsz);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该函数定义如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_segment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kexec_info *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bufsz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memsz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_segment_phys_virt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(info, buf, bufsz, base, memsz, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意&lt;code&gt;add_segment_phys_virt&lt;&#x2F;code&gt;的最后一个参数为1，这表明应该将传入的地址当作虚拟地址对待，通过&lt;code&gt;virt_to_phys&lt;&#x2F;code&gt;函数将其转换为物理地址。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-he-ming-ling-xing-yu-initrdde-chuan-ru&quot;&gt;内核命令行与initrd的传入&lt;&#x2F;h3&gt;
&lt;p&gt;ARM64内核启动时，要求用x0寄存器传递DTB在内存中的地址。kexec工具支持从命令行传入被装载内核的DTB文件，因此kexec可以从三个地方获取装载内核的DTB文件：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;命令行传入文件&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;sys&#x2F;firmware&#x2F;fdt&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;proc&#x2F;device-tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;优先级由高到低。获取到DTB之后，需要分别修正三个地方：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&#x2F;chosen&#x2F;bootargs          # 内核命令行&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;chosen&#x2F;linux,elfcorehdr           # 前面提到的ELF header地址&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;chosen&#x2F;linux,usable-memory-range     # 可用的内存区域，即crashkernel保留的内存区域&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;然后将initrd装载到一个新的kexec_segment中，然后修正DTB，加入initrd相关的结点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&#x2F;chosen&#x2F;linux,initrd-start&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;chosen&#x2F;linux,initrd-end&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最后将DTB装入自己的kexec_segment中。后面会提到，DTB的地址由purgatory通过x0寄存器传递给capture内核。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;purgatoryji-zhi&quot;&gt;purgatory机制&lt;&#x2F;h3&gt;
&lt;p&gt;前面可能已经注意到了，最终传递给&lt;code&gt;kexec_load&lt;&#x2F;code&gt;系统调用的entry参数并不是直接指向内核的。这说明kexec实现了自己的微型引导程序。kexec中这段微型引导程序被称为purgatory，其作用主要为校验内核镜像的哈希值与跳转到内核执行。该引导程序唯一需要准备的就是内核执行时将x0置为DTB的物理地址，其他ARM64内核boot协议中要求的条件都将由primary内核在crash时准备妥当。&lt;&#x2F;p&gt;
&lt;p&gt;purgatory的实现比较简单，由一小段汇编与一个用于计算内核镜像哈希值的C语言函数组成。程序被编译链接成relocatable的ELF文件镜像，并由kexec工程的编译系统将这个EFL文件填充至一个字节数组中备用。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; purgatory[] = {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x7f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x45&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x4c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x46&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x3e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.globl purgatory_start
purgatory_start:

	adr	x19&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.Lstack
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x19

	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bl	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;purgatory

	&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Start new image. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;
	ldr	x17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arm64_kernel_entry
	ldr	x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arm64_dtb_addr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	br	x17

size purgatory_start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;arm64_kernel_entry和arm64_dtb_addr都是64位的指针，由kexec装载purgatory到内存时填充。注意purgatory是relocatable的镜像，在装入内存时需要进行relocate操作，kexec完整了relocatable ELF镜像的loader。ELF文件格式及其装载操作可以参考ELF Spec文档，这里不再赘述。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 读取purgatory_start在内存中relocate后的位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	info-&amp;gt;entry = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elf_rel_get_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;info-&amp;gt;rhdr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;purgatory_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; image_base = kernel_segment + arm64_mem.text_offset
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elf_rel_set_symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;info-&amp;gt;rhdr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arm64_kernel_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;image_base,
		sizeof(image_base));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 设置装载到内存中的arm64_dtb_addr变量的值
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elf_rel_set_symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;info-&amp;gt;rhdr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arm64_dtb_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;dtb_base,
		sizeof(dtb_base));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;capturenei-he-ru-he-huo-qu-vmcore&quot;&gt;capture内核如何获取vmcore&lt;&#x2F;h3&gt;
&lt;p&gt;这个问题的前置问题是：capture内核如何确定自己是capture内核？内核启动时会检测&lt;code&gt;elfcorehdr&lt;&#x2F;code&gt;命令行参数（或者&lt;code&gt;&#x2F;chosen&#x2F;linux,elfcorehdr&lt;&#x2F;code&gt;设备树节点），如果存在则认为自己是capture内核。内核parse完该参数后，会将&lt;code&gt;elfcorehdr&lt;&#x2F;code&gt;的地址保存在&lt;code&gt;elfcorehdr_addr&lt;&#x2F;code&gt;变量中，后续也以该变量的值确认当前的状态。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static inline bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_kdump_kernel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; elfcorehdr_addr != ELFCORE_ADDR_MAX;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;用户态判断当前的内核是否为capture内核的直接方式是确认&lt;code&gt;&#x2F;proc&#x2F;vmcore&lt;&#x2F;code&gt;是否存在。那么分析内核代码时，也需要从这里入手。前面elfcorehdr参数实际上是一个earlyparam，因此在调用&lt;code&gt;__init&lt;&#x2F;code&gt;函数之前就已经完成的处理。内核中注册了位于&lt;code&gt;fs&#x2F;proc&#x2F;vmcore.c&lt;&#x2F;code&gt;中的&lt;code&gt;vmcore_init&lt;&#x2F;code&gt;函数，用于处理从primary内核传入的elfcorehdr。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs_initcall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(vmcore_init);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该函数在检测到elfcorehdr后会进行处理，然后注册&lt;code&gt;&#x2F;proc&#x2F;vmcore&lt;&#x2F;code&gt;文件。处理过程较为简单，下面主要提及主要步骤：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将所有的PT_NOTE类型的Program header合并成一个&lt;&#x2F;li&gt;
&lt;li&gt;重新计算所有Program Header类型的大小及偏移量&lt;&#x2F;li&gt;
&lt;li&gt;将所有需要dump内存区域的信息整理成一个链表备用&lt;&#x2F;li&gt;
&lt;li&gt;计算vmcore文件的大小&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最后用户态读取&lt;code&gt;&#x2F;proc&#x2F;vmcore&lt;&#x2F;code&gt;文件时，对于vmcore的ELF header和PT_NOTE可以直接读取，对于需要读取内存dump时则从原先primary内核的地址空间读取，省去了大片内存的拷贝。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pt-noteru-he-sheng-cheng&quot;&gt;PT_NOTE如何生成&lt;&#x2F;h3&gt;
&lt;p&gt;前面看到PT_NOTE类型的Program header一共有两类，分别由：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu[N]&#x2F;crash_notes{,_size}
&#x2F;sys&#x2F;kernel&#x2F;vmcoreinfo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;给出其物理地址。内核crash时应该会向其中写入对应的PT_NOTE类型的Program headers。这种类型的Program header的内容是由不定长的条目组成的，每个条目的header如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Note header in a PT_NOTE section *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; elf64_note {
  Elf64_Word n_namesz;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Name size *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  Elf64_Word n_descsz;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Content size *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  Elf64_Word n_type;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Content type *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} Elf64_Nhdr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在header之后紧随name和desc的字符串，字符串的首尾必须4字节对齐。name与type表示该条目的名称与类型，是由core文件生成方与读取方协定好的。条目的内容存放在desc中，格式也由core文件生成方自行定义，ELF文件spec中没有过多定义。&lt;&#x2F;p&gt;
&lt;p&gt;先看vmcoreinfo，该文件在内核编译时开启了&lt;code&gt;CONFIG_CRASH_CORE&lt;&#x2F;code&gt;时会存在：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CONFIG_CRASH_CORE

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;ssize_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vmcoreinfo_show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kobject *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kobj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
			       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kobj_attribute *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
	phys_addr_t vmcore_base = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paddr_vmcoreinfo_note&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sprintf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(buf, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;vmcore_base,
			(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)VMCOREINFO_NOTE_SIZE);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;KERNEL_ATTR_RO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(vmcoreinfo);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* CONFIG_CRASH_CORE *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个PT_NOTE只有一个条目，其name与type为&lt;code&gt;VMCOREINFO&lt;&#x2F;code&gt;和0。desc格式如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{TYPE}({NAME})={VALUE}\n
{TYPE}({NAME})={VALUE}\n
{TYPE}({NAME})={VALUE}\n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要记录内核中一些关键符号的物理地址、关键数据类型的字段偏移量和关键常量的值，具体内容可以参见&lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;latest&#x2F;admin-guide&#x2F;kdump&#x2F;vmcoreinfo.html&quot;&gt;内核文档&lt;&#x2F;a&gt;。由于这些信息都是内核的固有信息，因此这些内容在内核初始化是就会自动生成。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subsys_initcall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(crash_save_vmcoreinfo_init);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面来介绍crash_notes相关的信息。crash_notes应该是每个逻辑CPU对应一个，所以是一个percpu的变量，文件本身的定义在&lt;code&gt;driver&#x2F;base&#x2F;cpu.c&lt;&#x2F;code&gt;中可以找到。可以想象到crash_note是一个buffer的物理地址，这个buffer在&lt;code&gt;kernel&#x2F;kexec_core.c&lt;&#x2F;code&gt;中定义。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;note_buf_t __percpu *crash_notes;

typedef u32 note_buf_t[CRASH_CORE_NOTE_BYTES&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该percpu变量由&lt;code&gt;crash_notes_memory_init&lt;&#x2F;code&gt;函数初始化。前面看到，ARM64内核下内核崩溃时会调用&lt;code&gt;machine_crash_shutdown&lt;&#x2F;code&gt;函数，进而调用到&lt;code&gt;crash_save_cpu&lt;&#x2F;code&gt;函数，该函数会填写&lt;code&gt;crash_notes&lt;&#x2F;code&gt;。从中可以发现该函数填写的是标准的PTSTATUS信息，即普通coredump通用的线程信息，其name与type分别为&lt;code&gt;CORE&lt;&#x2F;code&gt;和NT_PRSTATUS（1）。函数只拷贝了当前CPU的运行task的PID与当前CPU的通用寄存器。&lt;&#x2F;p&gt;
&lt;p&gt;crash_save_cpu可能从两条code path被调用。内核崩溃时，触发崩溃的CPU会调用crash_save_cpu，并通过IPI中断告知其他CPU内核已经崩溃。在其他CPU的IPI中断处理函数中也会调用一次crash_save_cpu用以保存其他CPU的现场。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;build-elf-exec-info&quot;&gt;build_elf_exec_info&lt;&#x2F;h3&gt;
&lt;p&gt;函数本质是通过搜集系统信息获取以下结构体的字段，然后对ELF文件进行合法性检查。传入的buf其实就是crash内核解压后的内容。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mem_ehdr {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ei_class;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ei_data;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_type;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_machine;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_version;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_flags;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_phnum;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_shnum;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_shstrndx;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_entry;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_phoff;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_shoff;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; e_notenum;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mem_phdr *e_phdr;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mem_shdr *e_shdr;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mem_note *e_note;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rel_addr, rel_size;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数内部调用到了&lt;code&gt;build_elf_info&lt;&#x2F;code&gt;，继而调用到了&lt;code&gt;build_mem_ehdr&lt;&#x2F;code&gt;。&lt;code&gt;build_mem_ehdr函数&lt;&#x2F;code&gt;内部基本上就是填充ELF identity相关的字段，然后检查ELF header的合法性，最后根据ELF class的值（elf32或者elf64）将剩余工作委托给&lt;code&gt;build_mem_elf32_ehdr&lt;&#x2F;code&gt;函数或者&lt;code&gt;build_mem_elf64_ehdr&lt;&#x2F;code&gt;。这两个函数内部仅仅是拷贝对应字段，然后转换对应endian到host端endian。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;elf-arm64-load&quot;&gt;elf_arm64_load&lt;&#x2F;h3&gt;
&lt;p&gt;前面可以看到，对于每一个架构，架构相关代码注册该架构能够处理的内核文件格式。该函数就是对应于ELF格式的内核装载函数。函数首先调用&lt;code&gt;build_elf_exec_info&lt;&#x2F;code&gt;将ELF内核相关的ELF headers拷贝出来，其实就是换个格式原样copy，改了下endian。&lt;&#x2F;p&gt;
&lt;p&gt;然后函数开始处理image header，这里的image header指ARM64的内核镜像的image header。可以从内核文档的ARM64 boot protocol中得到该header的信息。我们从内核的连接脚本可以知道ELF格式的内核有两个PT_LOAD类型的segment，分别为code和data。对于这两个segment，尝试从中读取image header。我们知道有个内核特性能够让内核的text段装载地址随机化，这里需要特殊处理一下，否则是找不到image header的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;		header_offset = ehdr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e_entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- phdr-&amp;gt;p_vaddr;

		header = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; arm64_image_header *)(
			kernel_buf + phdr-&amp;gt;p_offset + header_offset);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在确认ARM64内核的magic无误之后，可以认为读取到了image header。接下来需要从image header中拿出两个值：text_offset和image_size，这两个值对于后面装载内核至关重要。在比较旧的内核（&amp;lt;3.17）中没有这两个值，需要使用默认值，这里需要注意。image_size即ARM64内核镜像的大小，text_offset为内核被放置的偏移量，后面详细说明。&lt;&#x2F;p&gt;
&lt;p&gt;函数后续调用&lt;code&gt;arm64_locate_kernel_segment&lt;&#x2F;code&gt;计算出内核放置的位置。对于crash模式，放置地址需要在crashkernel保留的内存空间中。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	kernel_segment = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arm64_locate_kernel_segment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(info);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;		hole = (crash_reserved_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; mem_min ?
				mem_min : crash_reserved_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
		hole = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ALIGN_UP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(hole, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MiB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
		hole_end = hole + arm64_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text_offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ arm64_mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里第二行做这个对齐操作是因为ARM64启动协议要求内核被放置在一个2M对齐的内存区域上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nei-he-ji-zhi&quot;&gt;内核机制&lt;&#x2F;h2&gt;
&lt;p&gt;flags中最后一位是&lt;code&gt;KEXEC_ON_CRASH&lt;&#x2F;code&gt;，有无这个flags会严格区分两个code path。由于我们分析kexec的目的是理解kdump的实现机制，因此从&lt;code&gt;KEXEC_ON_CRASH&lt;&#x2F;code&gt;入手进行分析。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kimage *kexec_image;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kimage *kexec_crash_image;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;内核使用kimage表示一个在内核中的镜像。使用&lt;code&gt;KEXEC_ON_CRASH&lt;&#x2F;code&gt;时，操作的是&lt;code&gt;kexec_crash_image&lt;&#x2F;code&gt;。当&lt;code&gt;kexec_load&lt;&#x2F;code&gt;系统调用传入的&lt;code&gt;nr_segments&lt;&#x2F;code&gt;参数为0时，内核会卸载掉对应的系统镜像。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kexec-segment&quot;&gt;kexec_segment&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kexec_segment {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
	 * This pointer can point to user memory if kexec_load() system
	 * call is used or will point to kernel memory if
	 * kexec_file_load() system call is used.
	 *
	 * Use -&amp;gt;buf when expecting to deal with user memory and use -&amp;gt;kbuf
	 * when expecting to deal with kernel memory.
	 *&#x2F;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __user *buf;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*kbuf;
	};
	size_t bufsz;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mem;
	size_t memsz;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个结构体是kexec_load系统调用传入的主要参数之一，总共有两个形态。在&lt;code&gt;kexec_load&lt;&#x2F;code&gt;中，第一个字段为用户态地址，而在&lt;code&gt;kexec_file_load&lt;&#x2F;code&gt;中，其第一个字段为内核地址。&lt;&#x2F;p&gt;
&lt;p&gt;从&lt;code&gt;kimage_load_crash_segment&lt;&#x2F;code&gt;中可以看到，内核对这个结构体的主要处理是将由前两个参数指定的缓冲区的内容复制到由后两个参数指定的物理内存区域中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;do-kexec-load&quot;&gt;do_kexec_load&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;申请新的kimage&lt;&#x2F;li&gt;
&lt;li&gt;拷贝vmcore_info到新申请的page里(应该不是真的vmcore而是某种指针性质的东西)&lt;&#x2F;li&gt;
&lt;li&gt;调用&lt;code&gt;kimage_load_crash_segment&lt;&#x2F;code&gt;将kexec_segment中指定的buffer拷贝到对应物理内存区域中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;image_terminate ? TODO&lt;&#x2F;p&gt;
&lt;p&gt;kimage_entry_t kimage-&amp;gt;head&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kimage-entry-t&quot;&gt;kimage_entry_t&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kimage {
	kimage_entry_t head;
	kimage_entry_t *entry;
	kimage_entry_t *last_entry;
    ...
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;kimage结构体的开头三个字段是&lt;code&gt;kimage_entry_t&lt;&#x2F;code&gt;类型的数据。该类型为一个指针类型（unsigned long），但是利用了一个trick，使用指针的低位保存特定flags。该指针的高位应该是用来保存一个page的物理地址。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;kimage_entry_t&lt;&#x2F;code&gt;实际上在crash模式下的kimage中是没有被用到的，但是最后调用cpu_soft_reset时需要将&lt;code&gt;kimage-&amp;gt;head&lt;&#x2F;code&gt;传入当作一个参数，后续读这段汇编代码时需要深入分析。先看初始化代码：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	image-&amp;gt;head = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
	image-&amp;gt;entry = &amp;amp;image-&amp;gt;head;
	image-&amp;gt;last_entry = &amp;amp;image-&amp;gt;head
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面为&lt;code&gt;do_kimage_alloc_init&lt;&#x2F;code&gt;函数中用于初始化这三个字段操作。首先明确这几个字段正常使用时分别保存了什么：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;head保存申请的内存区域第一个page的物理地址（物理地址）&lt;&#x2F;li&gt;
&lt;li&gt;entry是指向当前保存的最后一个entry的指针（虚拟地址）&lt;&#x2F;li&gt;
&lt;li&gt;last_entry指向申请的内存区域的最后一个entry位置（虚拟地址）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这里可以看到head设置为0，表示这块内存区域还没有申请。后续可以看到，在向kimage增加entry时（kimage_add_entry），会检查是否申请了内存区域，如果没有则进行申请：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(image-&amp;gt;entry == image-&amp;gt;last_entry) {
		kimage_entry_t *ind_page;
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; page *page;

		page = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kimage_alloc_page&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(image, GFP_KERNEL, KIMAGE_NO_DEST);
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!page)
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-ENOMEM;

		ind_page = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page_address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(page);
		*image-&amp;gt;entry = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;virt_to_boot_phys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ind_page) | IND_INDIRECTION;
		image-&amp;gt;entry = ind_page;
		image-&amp;gt;last_entry = ind_page +
				      ((PAGE_SIZE&#x2F;sizeof(kimage_entry_t)) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
	}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里尚没有分析这些entry的作用，但是可以确认在crash模式下的kexec并不会使用他们，而是直接使用&lt;code&gt;kimage_terminate&lt;&#x2F;code&gt;标记entry的结尾。后续需要分析普通模式下的kexec时，再做分析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crash-kexec&quot;&gt;__crash_kexec&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;__crash_kexec&lt;&#x2F;code&gt;函数是kdump的入口函数，在内核调用panic函数时被调用。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__crash_kexec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数看着比较简单：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(kexec_crash_image) {
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pt_regs fixed_regs;

			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;crash_setup_regs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;fixed_regs, regs);
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;crash_save_vmcoreinfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;machine_crash_shutdown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;fixed_regs);
			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;machine_kexec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(kexec_crash_image);
		}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先检查capture kernel是否已经装载，这是后续操作可以进行的前提。&lt;code&gt;crash_setup_regs&lt;&#x2F;code&gt;函数是一段简单的内联汇编，在其第二个参数为NULL时会dump下来当前寄存器的状态。&lt;code&gt;crash_save_vmcoreinfo&lt;&#x2F;code&gt;函数将前面的vmcoreinfo保存下来。&lt;code&gt;machine_crash_shutdown&lt;&#x2F;code&gt;函数会暂停所有CPU的执行，并dump下其寄存器状态。最后&lt;code&gt;machine_kexec&lt;&#x2F;code&gt;函数真正执行kexec的功能，启动crash内核。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;machine-kexec&quot;&gt;machine_kexec&lt;&#x2F;h3&gt;
&lt;p&gt;前面可以看到，装载crash内核时，申请了一个&lt;code&gt;control_code_page&lt;&#x2F;code&gt;。内核在进行kexec操作时，需要尽量不要破坏原有内核的环境，这个control_code_page实质上就是在原先预留出的内存空间中申请出来的page，用于保存relocate内核操作的函数代码。我们可以看到如下操作：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	reboot_code_buffer_phys = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page_to_phys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(kimage-&amp;gt;control_code_page);
	reboot_code_buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;phys_to_virt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reboot_code_buffer_phys);
	
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memcpy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reboot_code_buffer, arm64_relocate_new_kernel, arm64_relocate_new_kernel_size);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该函数实现在&lt;code&gt;.&#x2F;arch&#x2F;arm64&#x2F;kernel&#x2F;relocate_kernel.S&lt;&#x2F;code&gt;文件中。在完成一些缓存与flags操作之后，重置cpu：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu_soft_restart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reboot_code_buffer_phys, kimage-&amp;gt;head, kimage-&amp;gt;start, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;cpu-soft-restart&quot;&gt;cpu_soft_restart&lt;&#x2F;h3&gt;
&lt;p&gt;该函数工作本质上由&lt;code&gt;__cpu_soft_restart&lt;&#x2F;code&gt;完成。只不过需要将内核的page table还原成idmap（identity map）状态。可以明确entry参数为前面的&lt;code&gt;reboot_code_buffer_phys&lt;&#x2F;code&gt;即保存了&lt;code&gt;arm64_relocate_new_kernel&lt;&#x2F;code&gt;代码的一个page。剩余部分需要分析汇编代码，当然只看不写的话汇编代码也是比较简单的。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ENTRY(__cpu_soft_restart)
	&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Clear sctlr_el1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;
	mrs	x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sctlr_el1
	ldr	x13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;=SCTLR_ELx_FLAGS
	bic	x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x13
	pre_disable_mmu_workaround
	msr	sctlr_el1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x12
	isb

	cbz	x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;1f				&#x2F;&#x2F; el2_switch?
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;#HVC_SOFT_RESTART
	hvc	#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; no return

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1				&#x2F;&#x2F; entry
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x2				&#x2F;&#x2F; arg0
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x3				&#x2F;&#x2F; arg1
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x4				&#x2F;&#x2F; arg2
	br	x18
ENDPROC(__cpu_soft_restart)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里首先注意&lt;code&gt;.pushsection    .idmap.text, &amp;quot;awx&amp;quot;&lt;&#x2F;code&gt;指令，他将这个函数放置名为&lt;code&gt;.idmap.text&lt;&#x2F;code&gt;的section中，并将其内存属性设置可分配，可写与可执行。函数开头将SCTRL_EL1上的M，A，C，SA，I位清除：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;SCTLR_ELx_FLAGS	(SCTLR_ELx_M | SCTLR_ELx_A | SCTLR_ELx_C | \
			 SCTLR_ELx_SA | SCTLR_ELx_I)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即关闭命令与数据缓存，关闭对齐检查与栈对齐检查，关闭MMU。然后用isb命令清空指令cache。后面这个调用hvc的code path这里不分析，后续需要结合异常处理代码分析。最后函数将参数保存至x0，x1，x2然后跳转到entry（即前面的arm64_relocate_new_kernel）执行。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arm64-relocate-new-kernel&quot;&gt;arm64_relocate_new_kernel&lt;&#x2F;h3&gt;
&lt;p&gt;该函数由汇编写成。先总结一个结论，对于crash模式下的kexec，函数基本不执行任何操作，仅仅是清除&lt;code&gt;SCTLR_ELx_FLAGS&lt;&#x2F;code&gt;然后跳转到&lt;code&gt;kimage-&amp;gt;start&lt;&#x2F;code&gt;然后开始执行，跳转时x0-x3参数的值都为0。为了更明确其行为，帮助理解普通kexec下进行的操作，有必要分析这个函数。前面提到函数开头会检测当前是否处于EL2，如果是则会清除对应的flags：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;	&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Clear the sctlr_el2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;
	mrs	x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CurrentEL
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;#CurrentEL_EL2
	b.ne	1f
	mrs	x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sctlr_el2
	ldr	x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;=SCTLR_ELx_FLAGS
	bic	x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1
	pre_disable_mmu_workaround
	msr	sctlr_el2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0
	isb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数之后处理kimage-&amp;gt;head，看到这里明白&lt;code&gt;kimage-&amp;gt;head&lt;&#x2F;code&gt;实际上是新kernel进行relocation所需的信息。当然对于crash模式下的kexec来说，&lt;code&gt;kimage-&amp;gt;head&lt;&#x2F;code&gt;是IND_DONE，loop会直接跳出。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;	&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Check if the new image needs relocation. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;
	tbnz	x16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IND_DONE_BIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.Ldone
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;loop在循环时会检查entry里flags的值：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;IND_DESTINATION：将entry里的page地址设置为拷贝时的目标地址dest&lt;&#x2F;li&gt;
&lt;li&gt;IND_INDIRECTION：循环在遇到这个标志时，会从entry指向的page里读取新的entry。这样可以实现多buffer保存entry&lt;&#x2F;li&gt;
&lt;li&gt;IND_SOURCE：循环遇到这个标志时，会把entry指向的page整个复制到dest指向的page，并将dest的值自增指向dest向后的下个page&lt;&#x2F;li&gt;
&lt;li&gt;IND_DONE: 循环读到这个flag时，会退出执行&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;loop处理完毕时，新内核的relocation也完成了，函数在刷新完缓存后跳转到&lt;code&gt;kimage-&amp;gt;start&lt;&#x2F;code&gt;进行执行。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;	&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Start new image. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xzr
	br	x17
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
