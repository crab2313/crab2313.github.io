<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - pci</title>
	<link href="https://crab2313.github.io/tags/pci/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-02-19T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/pci/atom.xml</id>
	<entry xml:lang="en">
		<title>PCI驱动框架分析</title>
		<published>2020-02-19T00:00:00+00:00</published>
		<updated>2020-02-19T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/pci/" type="text/html"/>
		<id>https://crab2313.github.io/pci/</id>
		<content type="html">&lt;h1 id=&quot;pci&quot;&gt;PCI&lt;&#x2F;h1&gt;
&lt;p&gt;分析流程：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;硬件文档&lt;&#x2F;li&gt;
&lt;li&gt;PCI框架核心层&lt;&#x2F;li&gt;
&lt;li&gt;PCI框架热插拔&lt;&#x2F;li&gt;
&lt;li&gt;vfio&lt;&#x2F;li&gt;
&lt;li&gt;iommu&lt;&#x2F;li&gt;
&lt;li&gt;vfio接口层与用户态使用cloud-hypervisor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一共十一万行代码。&lt;&#x2F;p&gt;
&lt;p&gt;从ACPI的codepath开始看吧，比较熟悉一点。首先是找到初始化函数，&lt;code&gt;acpi_pci_init&lt;&#x2F;code&gt;。可以看到该函数首先从FADT中的boot_flags标志里检查两个标志：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;flags&lt;&#x2F;th&gt;&lt;th&gt;desc&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;ACPI_FADT_NO_MSI&lt;&#x2F;td&gt;&lt;td&gt;表示不支持MSI&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ACPI_FADT_NO_ASPM&lt;&#x2F;td&gt;&lt;td&gt;表示不支持高级电源管理&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;acpixia-dui-pcizong-xian-de-mei-ju-cao-zuo&quot;&gt;ACPI下对PCI总线的枚举操作&lt;&#x2F;h2&gt;
&lt;p&gt;ACPI的Definition Block中使用&lt;code&gt;PNP0A03&lt;&#x2F;code&gt;表示一个PCI Host Bridge。有关ACPI的知识就不提了，这里只总结机制，剩下的交给ACPI的Spec。在内核代码简单搜索即可发现对于PCI Host Bridge的处理在&lt;code&gt;drivers&#x2F;acpi&#x2F;pci_root.c&lt;&#x2F;code&gt;文件中。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; acpi_device_id root_device_ids[] = {
	{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PNP0A03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
	{&amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; acpi_scan_handler pci_root_handler = {
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= root_device_ids,
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attach &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= acpi_pci_root_add,
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detach &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= acpi_pci_root_remove,
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hotplug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scan_dependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= acpi_pci_root_scan_dependent,
	},
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TODO： 这里留存有疑点，即内核中是如何处理&lt;code&gt;_HID&lt;&#x2F;code&gt;和&lt;code&gt;_CID&lt;&#x2F;code&gt;的关系的。PCIE Host Bridge一般将&lt;code&gt;_CID&lt;&#x2F;code&gt;设置成&lt;code&gt;PNP0A03&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;因此可以发现这里进行设备枚举的代码即为&lt;code&gt;acpi_pci_root_add&lt;&#x2F;code&gt;函数。函数首先通过&lt;code&gt;_SEG&lt;&#x2F;code&gt;确定该PCI Host bridge的segment group。随后通过&lt;code&gt;_CRS&lt;&#x2F;code&gt;里的BusRange类型资源取得该Host Bridge的Secondary总线范围，保存在&lt;code&gt;root-&amp;gt;secondary&lt;&#x2F;code&gt;这个resource中。然后设置基本属性：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	root-&amp;gt;device = device;
	root-&amp;gt;segment = segment &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFFFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strcpy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acpi_device_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(device), ACPI_PCI_ROOT_DEVICE_NAME);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strcpy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acpi_device_class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(device), ACPI_PCI_ROOT_CLASS);
	device-&amp;gt;driver_data = root;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;_CBA&lt;&#x2F;code&gt;对象中可以保存这个PCI Host Bridge的用于MMCONFIG枚举的基址：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	root-&amp;gt;mcfg_addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acpi_pci_root_get_mcfg_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(handle)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TODO _OSC&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	negotiate_os_control(root, &amp;amp;no_aspm);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;随后，调用&lt;code&gt;pci_acpi_scan_root&lt;&#x2F;code&gt;函数枚举这个Host Bridge上的设备。该函数是一个平台相关的函数，即各个平台独立实现了该函数，下面分析ARM64平台下的实现。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_ecam_ops pci_generic_ecam_ops = {
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bus_shift	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pci_ops	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map_bus	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_ecam_map_bus,
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_generic_config_read,
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_generic_config_write,
	}
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;host-bridgeguan-li&quot;&gt;Host Bridge管理&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;tong-yong-kong-zhi-qi-qu-dong-fen-xi&quot;&gt;通用控制器驱动分析&lt;&#x2F;h2&gt;
&lt;p&gt;这里分析内核中实现的通用控制器驱动，该驱动通过ECAM实现对设备的枚举，在ARM中比较常用。该驱动一般通过设备树进行配置，其设备树bingding位于&lt;code&gt;bindings&#x2F;pci&#x2F;host-generic-pci.txt&lt;&#x2F;code&gt;文件中。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pci_ecam_ops {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;			bus_shift;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_ops			pci_ops;
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*init)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_config_window *);
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pci_ops {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*add_bus)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_bus *bus);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*remove_bus)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_bus *bus);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __iomem *(*map_bus)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_bus *bus, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; devfn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; where);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*read)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_bus *bus, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; devfn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; where, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; size, u32 *val);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*write)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_bus *bus, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; devfn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; where, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; size, u32 val);
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从名字可以看出pci_ecam_ops是用于操作ECAM空间的一组函数指针。驱动通过填充这组函数指针，可以向通用代码提供一个统一的操作入口。对于&lt;code&gt;pci-host-ecam-generic&lt;&#x2F;code&gt;来说，其操作定义如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pci_ecam_ops pci_generic_ecam_ops = {
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bus_shift	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
	.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pci_ops	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= {
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map_bus	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_ecam_map_bus,
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_generic_config_read,
		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= pci_generic_config_write,
	}
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面来看进行probe操作的通用函数&lt;code&gt;pci_host_common_probe&lt;&#x2F;code&gt;。事实上这个驱动对于PCI总线一般会进行两个操作：配置与枚举。配置操作即为配置整个PCI总线，分配总线和设备号，而枚举操作即为常规的枚举总线上的设备。在PCI总线已经配置好（如固件配置，或者虚拟机等）的情况下，可以通过chosen节点下配置&lt;code&gt;linux,pci-probe-only&lt;&#x2F;code&gt;让内核跳过配置操作。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
