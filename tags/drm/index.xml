<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>drm on crab2313's blog</title><link>/tags/drm/</link><description>Recent content in drm on crab2313's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 15 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/drm/index.xml" rel="self" type="application/rss+xml"/><item><title>MESA源码分析：GBM的使用与实现</title><link>/post/mesa-gbm/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>/post/mesa-gbm/</guid><description>这次我感觉我能看懂GBM了，本文对GBM的实现和用法进行分析。 我们先从原理上对GBM进行推导。GBM的本质：硬件无关的显存申请与管理。为什么</description></item><item><title>DRM框架分析（四）：Atomic KMS</title><link>/post/drm-atomic-kms/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>/post/drm-atomic-kms/</guid><description>首先Atomic Mode Setting（后续简称A-KMS）是DRM子系统最近的一次比较大的改动，其目的是填补当前API的不足。由于原先的API不</description></item><item><title>DRM框架分析（一）：简介</title><link>/post/drm-intro/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>/post/drm-intro/</guid><description>真的没有想到真的有人能看到这篇东西，所以我准备抽出时间把这个东西整理完。本文是我阅读内核DRM子系统的一些随笔，其目的是记录我对内核代码的阅</description></item><item><title>DRM框架分析（三）：显存管理</title><link>/post/drm-vram/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>/post/drm-vram/</guid><description>GEM GEM与TTM之间的关系 TTM是内核最初的DRM显存管理器，其设计思想是试图为所有的显卡驱动提供一个公共的API。TTM后面被认为是失败的</description></item><item><title>DRM框架分析（二）：KMS</title><link>/post/drm-legacy-kms/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>/post/drm-legacy-kms/</guid><description>KMS全称是Kernel Mode Setting，这里的mode是指显示控制器的mode，详见下面对drm_mode的分析。与KMS相对应的是Use</description></item><item><title>Mutter实现分析：Atomic Modesetting</title><link>/post/mutter-a-kms/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>/post/mutter-a-kms/</guid><description>首先注意一个名字上的区分，一开始看代码的人可能会对命名有疑惑。在Jonas的设计中，整个KMS相关代码分为两个上下文：main和impl。m</description></item><item><title>Mutter窗口管理器实现分析</title><link>/post/mutter/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>/post/mutter/</guid><description>本文是我对理解Mutter运行机制以及Linux的DRM子系统的一次尝试。之前的尝试似乎由于种种原因没有进行下去，而我最近深受GNOME下各</description></item><item><title>TTM内存分配器分析</title><link>/post/ttm/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>/post/ttm/</guid><description>TTM 本文结合QXL内的实现分析内核DRM框架中提供的TTM内存管理器。 BO BO是Buffer Object的缩写，与Buffer是有区别的。个人理</description></item></channel></rss>