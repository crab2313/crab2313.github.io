<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - isa</title>
	<link href="https://crab2313.github.io/tags/isa/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-14T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/isa/atom.xml</id>
	<entry xml:lang="en">
		<title>Linux内核在RISC-V架构下的内存屏障与原子操作</title>
		<published>2020-08-14T00:00:00+00:00</published>
		<updated>2020-08-14T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/riscv-atomic-barrier-bitops/" type="text/html"/>
		<id>https://crab2313.github.io/riscv-atomic-barrier-bitops/</id>
		<content type="html">&lt;p&gt;内存一致性模型是一个体系结构中至关重要的一部分，本质上为软件与硬件之间的契约。软件开发人员可以从内存一致性模型中得知硬件进行内存操作时可能的行为，这是多线程共享内存操作正确性的基石。RISC-V的内存模型被称作RVWMO（RISC-V Weak Memory Order），本质上是&lt;code&gt;Release Consistency&lt;&#x2F;code&gt;与&lt;code&gt;Relaxed Consistency&lt;&#x2F;code&gt;的结合体。本文试图从Linux对内存一致性模型的抽象API入手，分析这些抽象API的用法用例以及对应RISC-V体系结构的实现。&lt;&#x2F;p&gt;
&lt;p&gt;题外话，来总结一下想要理解这部分内容需要哪些知识储备：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GCC內联汇编基础。上述提到的抽象API有很大一部分都是使用具体体系结构下的汇编代码实现，因此掌握GCC提供的扩展內联汇编是读懂对应实现的必要基础。建议看这本&lt;a href=&quot;https:&#x2F;&#x2F;0xax.gitbooks.io&#x2F;linux-insides&#x2F;content&#x2F;Theory&#x2F;linux-theory-3.html&quot;&gt;简易教程&lt;&#x2F;a&gt;和&lt;a href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc-10.2.0&#x2F;gcc&#x2F;Extended-Asm.html&quot;&gt;GCC官方文档&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;计算机体系结构相关理论。这里没什么多说的，目前大部分体系结构手册都假定读者具有扎实的计算机体系结构理论基础。这里推荐&lt;a href=&quot;https:&#x2F;&#x2F;www.morganclaypool.com&#x2F;doi&#x2F;10.2200&#x2F;S00962ED2V01Y201910CAC049&quot;&gt;《A Primer on Memory Consistency and Cache Coherence, 2nd》&lt;&#x2F;a&gt;，里面有引用一些paper，建议一读。&lt;&#x2F;li&gt;
&lt;li&gt;对应体系结构手册。说到底，内存一致性是体系结构不可分离的一部分，因此熟读体系结构手册是理解对应操作的有力途径。&lt;&#x2F;li&gt;
&lt;li&gt;阅读内核文档。内核的&lt;code&gt;memory-barrier.txt&lt;&#x2F;code&gt;、&lt;code&gt;atomic_t.txt&lt;&#x2F;code&gt;以及&lt;code&gt;atomic_bitops.txt&lt;&#x2F;code&gt;都是极其重要的说明文档。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nei-cun-ping-zhang&quot;&gt;内存屏障&lt;&#x2F;h2&gt;
&lt;p&gt;RISC-V的内存屏障全部由&lt;code&gt;fence&lt;&#x2F;code&gt;指令实现，第一次读RISC-V手册的人一般会难以相信&lt;code&gt;fence&lt;&#x2F;code&gt;的设计竟然这么简单。&lt;code&gt;fence&lt;&#x2F;code&gt;指令形式如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;iorw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;], [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;iorw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中&lt;code&gt;[iorw]&lt;&#x2F;code&gt;为&lt;code&gt;iorw&lt;&#x2F;code&gt;中的任选几个字母，其中：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;i：设备内存输入（读取）&lt;&#x2F;li&gt;
&lt;li&gt;o: 设备内存输出（写入）&lt;&#x2F;li&gt;
&lt;li&gt;r：普通内存读取&lt;&#x2F;li&gt;
&lt;li&gt;w：普通内存写入&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;整个指令&lt;code&gt;fence [set1], [set2]&lt;&#x2F;code&gt;的语义为：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;定义predecessor集合为该&lt;code&gt;fence&lt;&#x2F;code&gt;指令之前所有属于&lt;code&gt;[set1]&lt;&#x2F;code&gt;类型的指令之集合&lt;&#x2F;li&gt;
&lt;li&gt;定义successor集合为该&lt;code&gt;fence&lt;&#x2F;code&gt;指令之后所有属于&lt;code&gt;[set2]&lt;&#x2F;code&gt;类型的指令之集合&lt;&#x2F;li&gt;
&lt;li&gt;则其他RISC-V Hart或者外部设备不会观测到successor集合中的指令在predecessor集合中的指令之前发生&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Linux内核中，内存屏障相关的定义都在体系结构对应文件夹下的&lt;code&gt;include&#x2F;asm&#x2F;barrier.h&lt;&#x2F;code&gt;中。其中，对于&lt;code&gt;fence&lt;&#x2F;code&gt;指令的抽象如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) \
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #p &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #s : : : &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很显然是一条简单的內联汇编，&lt;code&gt;__volatile__&lt;&#x2F;code&gt;与&lt;code&gt;memory&lt;&#x2F;code&gt;都是用于阻止编译器进行优化的常规操作。后续的实现都是围绕这个宏进行的。&lt;&#x2F;p&gt;
&lt;p&gt;内核中对这些宏的实现策略比较简单，基本原理如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;asm-generic&lt;&#x2F;code&gt;中的&lt;code&gt;barrier.h&lt;&#x2F;code&gt;中定义默认实现，如果目标架构没有对应实现，则启动默认实现&lt;&#x2F;li&gt;
&lt;li&gt;在&lt;code&gt;arch&#x2F;include&#x2F;asm&#x2F;barrier.h&lt;&#x2F;code&gt;中定义架构特定实现，一般为内联汇编定义&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mb-rmb-wmb&quot;&gt;mb &amp;amp;&amp;amp; rmb &amp;amp;&amp;amp; wmb&lt;&#x2F;h3&gt;
&lt;p&gt;这三个操作与其对应的&lt;code&gt;smp_*&lt;&#x2F;code&gt;之间最大的区别就是需要对设备内存也生效，所以它们的实现如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(iorw,iorw)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rmb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ir,ir)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;wmb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ow,ow)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;smp-mb-smp-rmb-smp-wmb&quot;&gt;smp_mb &amp;amp;&amp;amp; smp_rmb &amp;amp;&amp;amp; smp_wmb&lt;&#x2F;h3&gt;
&lt;p&gt;首先一定明确&lt;code&gt;smp_&lt;&#x2F;code&gt;前缀所代表的含义，即“用于SMP（symmetric multi-processor）的”。因此，在内核支持SMP时，它们被定义为其对应的&lt;code&gt;__smp_*&lt;&#x2F;code&gt;，反之则定义为&lt;code&gt;barrier()&lt;&#x2F;code&gt;，即普通的编译器内存屏障，防止编译器进行内存访问重排。前面也提到了，这几个操作并不需要考虑到设备内存，因此它们定义如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__smp_mb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rw,rw)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__smp_rmb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(r,r)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__smp_wmb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(w,w)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;smp-load-acquire-smp-store-release&quot;&gt;smp_load_acquire &amp;amp;&amp;amp; smp_store_release&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__smp_store_release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)					\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{									\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compiletime_assert_atomic_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*p);				\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rw,w);						\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WRITE_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*p, v);						\
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__smp_load_acquire&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)						\
({									\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*p) ___p1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;READ_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*p);				\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compiletime_assert_atomic_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*p);				\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RISCV_FENCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(r,rw);						\
	___p1;								\
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还是跟前面提到的一样，带&lt;code&gt;smp_&lt;&#x2F;code&gt;前缀的宏都是只在&lt;code&gt;CONFIG_SMP&lt;&#x2F;code&gt;开启时有定义，否则为空操作。&lt;code&gt;load acquire&lt;&#x2F;code&gt;的定义就是在这个&lt;code&gt;barrier&lt;&#x2F;code&gt;之后的读写不能出现在它之前，且&lt;code&gt;load acquire&lt;&#x2F;code&gt;是读取操作，所以自然使用&lt;code&gt;RISCV_FENCE(r, rw)&lt;&#x2F;code&gt;。&lt;code&gt;store release&lt;&#x2F;code&gt;同理。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yuan-zi-cao-zuo&quot;&gt;原子操作&lt;&#x2F;h2&gt;
&lt;p&gt;可以从&lt;code&gt;arch&#x2F;riscv&#x2F;Kconfig&lt;&#x2F;code&gt;中看到RISC-V平台在非64位时会选择&lt;code&gt;CONFIG_GENERIC_ATOMIC64&lt;&#x2F;code&gt;，如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;config RISCV
        def_bool y
        select ARCH_CLOCKSOURCE_INIT
        select ARCH_SUPPORTS_ATOMIC_RMW
        ......
        select GENERIC_ATOMIC64 if !64BIT   &amp;lt;== 
        select GENERIC_CLOCKEVENTS
        ......
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这点很好理解：在32位下RISC-V架构无法保证64位操作的原子性，因此内核使用通用的64位原子操作实现，通过自旋锁实现64位原子操作，这在&lt;code&gt;arch&#x2F;riscv&#x2F;include&#x2F;asm&#x2F;atomic.h&lt;&#x2F;code&gt;开头中有体现：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CONFIG_GENERIC_ATOMIC64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asm-generic&#x2F;atomic64.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
# if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; (__riscv_xlen &amp;lt; 64)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#  error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;64-bit atomics require XLEN to be at least 64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# endif
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#endi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;原子变量的定义是跨平台的，位于&lt;code&gt;include&#x2F;linux&#x2F;types.h&lt;&#x2F;code&gt;中：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; counter;
} atomic_t;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CONFIG_64BIT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
	s64 counter;
} atomic64_t;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个原子性由硬件保证，一般来说，一个架构的word大小数据在对齐访问的情况下是可以保证原子性的，具体需要翻看手册。随后是&lt;code&gt;fence&lt;&#x2F;code&gt;指令实现的&lt;code&gt;release acquire&lt;&#x2F;code&gt;语义：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__atomic_acquire_fence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()					\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(RISCV_ACQUIRE_BARRIER &amp;quot;&amp;quot; ::: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__atomic_release_fence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()					\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(RISCV_RELEASE_BARRIER &amp;quot;&amp;quot; ::: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个用于&lt;code&gt;atomic-fallback.h&lt;&#x2F;code&gt;中自动生成的函数。对于读写这种&lt;code&gt;non-RMW&lt;&#x2F;code&gt;操作，如你所见就是这么简单：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __always_inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;atomic_read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; atomic_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;READ_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(v-&amp;gt;counter);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __always_inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;atomic_set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(atomic_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WRITE_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(v-&amp;gt;counter, i);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还是那句话，硬件保证原子性，内核只要保证生成的指令不走样就行了，这也是使用&lt;code&gt;READ_ONCE&lt;&#x2F;code&gt;和&lt;code&gt;WRITE_ONCE&lt;&#x2F;code&gt;的原因。接下来就是重头戏：对于&lt;code&gt;RMW&lt;&#x2F;code&gt;操作实现。RISC-V中定义了原子操作指令，即被称为&lt;code&gt;A&lt;&#x2F;code&gt;的扩展，Linux内核默认要求其已被实现。内核中通过內联汇编模板的方式实现这些操作，也算是比较简洁的了。&lt;&#x2F;p&gt;
&lt;p&gt;对于&lt;code&gt;RMW&lt;&#x2F;code&gt;类的原子操作，我们主要关注其：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;功能正确性&lt;&#x2F;li&gt;
&lt;li&gt;内存序正确性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zhi-ling-jian-jie&quot;&gt;指令简介&lt;&#x2F;h3&gt;
&lt;p&gt;先来简单介绍一下RISC-V的原子操作指令。很简单，几句话就可以描述清楚：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RISC-V的原子操作指令命名类如&lt;code&gt;amo{op}.{w&#x2F;d}.{rl&#x2F;aq&#x2F;aqrl}&lt;&#x2F;code&gt;。第一部分描述功能，如&lt;code&gt;amoadd&lt;&#x2F;code&gt;和&lt;code&gt;amoswap&lt;&#x2F;code&gt;等等，其中&lt;code&gt;amo&lt;&#x2F;code&gt;是&lt;code&gt;atomic memory operation&lt;&#x2F;code&gt;的缩写。第二部分为操作数据的长度，w（word）表示32位，d（double word）表示32位。第三部分比较有意思，RISC-V的原子操作指令中encode了两位，分别&lt;code&gt;acquire&lt;&#x2F;code&gt;和&lt;code&gt;release&lt;&#x2F;code&gt;，使其具有了内存序属性，看得出来是对OS进行了高度优化的。&lt;&#x2F;li&gt;
&lt;li&gt;RISC-V的原子操作指令编码了三个寄存器：&lt;code&gt;rs1&lt;&#x2F;code&gt;、&lt;code&gt;rs2&lt;&#x2F;code&gt;和&lt;code&gt;rd&lt;&#x2F;code&gt;。其中&lt;code&gt;rs1&lt;&#x2F;code&gt;为原子变量的内存地址，&lt;code&gt;rs2&lt;&#x2F;code&gt;是该操作的另一个操作数（operand）。指令执行时，首先从&lt;code&gt;rs1&lt;&#x2F;code&gt;指向的内存中取出原子变量的值，保存在&lt;code&gt;rd&lt;&#x2F;code&gt;寄存器，然后与&lt;code&gt;rs2&lt;&#x2F;code&gt;进行操作，最后将结果保存回&lt;code&gt;rs1&lt;&#x2F;code&gt;指向的内存地址。这里注意RISC-V的原子操作可以将变量的地址保存在&lt;code&gt;rd&lt;&#x2F;code&gt;寄存器，如果不需要可用&lt;code&gt;zero&lt;&#x2F;code&gt;寄存器当作&lt;code&gt;rd&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wu-fan-hui-zhi-yuan-zi-cao-zuo-han-shu&quot;&gt;无返回值原子操作函数&lt;&#x2F;h3&gt;
&lt;p&gt;顾名思义，就是没有返回值的&lt;code&gt;RMW&lt;&#x2F;code&gt;类原子操作函数，注意这类函数在内核中是没有内存序要求的。可以看到这类函数使用一个通用的模板生成：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ATOMIC_OP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm_op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)		\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __always_inline							\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; atomic##prefix##_##&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c_type i, atomic##prefix##_t *v)		\
{									\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(						\
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	amo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_op &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_type &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; zero, %1, %0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;	\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (v-&amp;gt;counter)					\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (I)						\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);						\
}			
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;很简单，唯一需要注意的就是这个&lt;code&gt;+A&lt;&#x2F;code&gt;。从GCC官方的&lt;a href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;gcc&#x2F;Machine-Constraints.html#Machine-Constraints&quot;&gt;文档&lt;&#x2F;a&gt;中可以看到，&lt;code&gt;A&lt;&#x2F;code&gt;是RISC-V中单独定义的，表示一个存放着内存地址的寄存器变量。且返回值寄存器被设置成&lt;code&gt;zero&lt;&#x2F;code&gt;，以示忽略。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm_op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)					\
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(op, asm_op, I, w, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,   )				\
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(op, asm_op, I, d, s64, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(add, add,  i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sub, add, -i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(and, and,  i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;( or,  or,  i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ATOMIC_OPS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(xor, xor,  i)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;you-fan-hui-zhi-yuan-zi-cao-zuo-han-shu&quot;&gt;有返回值原子操作函数&lt;&#x2F;h3&gt;
&lt;p&gt;内核中，有返回值原子操作函数分为&lt;code&gt;fetch&lt;&#x2F;code&gt;和&lt;code&gt;return&lt;&#x2F;code&gt;。这二者的区别为&lt;code&gt;fetch&lt;&#x2F;code&gt;返回原子变量原有的值，而&lt;code&gt;return&lt;&#x2F;code&gt;返回原子变量经过操作的值。我们可以从内核中的&lt;code&gt;atomic_t.txt&lt;&#x2F;code&gt;文档中知道，默认情况下，有返回值的原子操作函数都是有内存序的。且函数具有一些加了特殊后缀的变体，可以指定内存序语义，如&lt;code&gt;_relaxed&lt;&#x2F;code&gt;、&lt;code&gt;_acquire&lt;&#x2F;code&gt;和&lt;code&gt;_release&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ATOMIC_FETCH_OP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm_op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;I&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)	\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __always_inline							\
c_type atomic##prefix##_fetch_##op##&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_relaxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c_type i,			\
					     atomic##prefix##_t *v)	\
{									\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c_type ret;						\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(						\
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	amo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_op &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_type &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; %1, %2, %0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;	\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (v-&amp;gt;counter), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (ret)				\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (I)						\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);						\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ret;							\
}									\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; __always_inline							\
c_type atomic##prefix##_fetch_##&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(c_type i, atomic##prefix##_t *v)	\
{									\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; c_type ret;						\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__volatile__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(						\
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	amo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_op &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; #asm_type &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.aqrl  %1, %2, %0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;	\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (v-&amp;gt;counter), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (ret)				\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (I)						\
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);						\
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ret;							\
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到&lt;code&gt;fetch&lt;&#x2F;code&gt;函数的內联汇编模板也分两套，对于&lt;code&gt;_relaxed&lt;&#x2F;code&gt;函数，没有加上&lt;code&gt;.aqrl&lt;&#x2F;code&gt;，即不指定内存序语义。&lt;code&gt;return&lt;&#x2F;code&gt;函数实际上就是&lt;code&gt;fetch&lt;&#x2F;code&gt;函数返回值经过重新计算得出，不再赘述，注意想清楚&lt;code&gt;atomic&lt;&#x2F;code&gt;的操作究竟在哪，就不会有&lt;code&gt;return&lt;&#x2F;code&gt;函数不是原子操作的错觉。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;atomic-fetch-add-unless-atomic-sub-if-positive&quot;&gt;atomic_fetch_add_unless &amp;amp;&amp;amp; atomic_sub_if_positive&lt;&#x2F;h3&gt;
&lt;p&gt;RISC-V结构下对这两个函数做了实现，且都是利用了&lt;code&gt;LR&#x2F;SC&lt;&#x2F;code&gt;指令。先来看一下它们实现的功能：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atomic_fetch_add_unless&lt;&#x2F;code&gt;有两个额外参数&lt;code&gt;a&lt;&#x2F;code&gt;和&lt;code&gt;u&lt;&#x2F;code&gt;，进行操作时，如果原子变量的值与&lt;code&gt;u&lt;&#x2F;code&gt;不相等，则将其加上&lt;code&gt;a&lt;&#x2F;code&gt;，并返回原先的值。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;atomic_sub_if_positive&lt;&#x2F;code&gt;从名字上就可以看出来功能：如果原子变量的值是正的，则将其减去参数传入的值，并返回最后的结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;前面提到这两个操作是&lt;code&gt;LR&#x2F;SC&lt;&#x2F;code&gt;指令实现的，那么先简介一下这对指令是如何工作的：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LR指令是&lt;code&gt;load reserved&lt;&#x2F;code&gt;的缩写，它首先会读取一个内存地址的值，然后在该内存地址做标记。&lt;&#x2F;li&gt;
&lt;li&gt;SC指令是&lt;code&gt;store conditional&lt;&#x2F;code&gt;的缩写，它的作用写将一个值写入一个内存地址。对于同一个&lt;code&gt;HART&lt;&#x2F;code&gt;，&lt;code&gt;SC&lt;&#x2F;code&gt;首先检查标记的值是否正确，如果正确才进行写入操作，否则返回错误。注意无论如何对应地址的标记都会被&lt;code&gt;SC&lt;&#x2F;code&gt;指令清除。&lt;&#x2F;li&gt;
&lt;li&gt;LR和SC配合使用，其意义在于：如果SC指令成功执行，则意味着在LR到SC指令这一段时间内，没有其他的&lt;code&gt;HART&lt;&#x2F;code&gt;对这个地址进行访问（因为标记没有失效）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;__asm__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__volatile__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0:	lr.w     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[p]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	beq      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[p]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[u]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, 1f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	add      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[rc]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[p]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[a]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	sc.w.rl  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[rc]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[rc]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	bnez     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%[rc]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, 0b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	fence    rw, rw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
		: [p]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&amp;amp;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (prev), [rc]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&amp;amp;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (rc), [c]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (v-&amp;gt;counter)
		: [a]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (a), [u]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; (u)
		: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到本质是通过循环调用&lt;code&gt;LR&#x2F;SC&lt;&#x2F;code&gt;对，不断尝试，如果成功，则说明这段时间内没有人访问原子变量，操作成功独占，故而肯定是原子的。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
