<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - eventfd</title>
	<link href="https://crab2313.github.io/tags/eventfd/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2017-12-19T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/eventfd/atom.xml</id>
	<entry xml:lang="en">
		<title>eventfd在内核中的实现</title>
		<published>2017-12-19T00:00:00+00:00</published>
		<updated>2017-12-19T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/eventfd/" type="text/html"/>
		<id>https://crab2313.github.io/eventfd/</id>
		<content type="html">&lt;p&gt;eventfd是一个利用匿名文件描述符实现“等待&#x2F;通知”通信机制的一种方式。它比较方便的一点是，eventfd不仅可以实现用户态与用户态之间的通信，也可以实现内核与用户态的通信。eventfd的实现比较简单易懂，主要在以下两个文件中：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;include&#x2F;linux&#x2F;eventfd.h&lt;&#x2F;li&gt;
&lt;li&gt;fs&#x2F;eventfd.c&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;而关于eventfd的详细说明可以参考man-pages：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;man eventfd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于eventfd的实现很简短（只有500行左右），下面详细地分析在内核中的实现。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zai-nei-he-zhong-de-biao-shi&quot;&gt;在内核中的表示&lt;&#x2F;h1&gt;
&lt;p&gt;很明显，eventfd需要一个保存特定的状态，内核使用eventfd_ctx来保存一个eventfd的状态信息。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;eventfd_ctx {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; kref kref;
        wait_queue_head_t wqh;
        __u64 count;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flags;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到内核使用了一个kref来作为引用计数。使用一个64位的count字段来保存eventfd的内部计数器，使用flags字段保存eventfd的标志位。作为一个“等待&#x2F;通知”机制，等待和唤醒操作是必不可少的，内核中实现这个操作的标准方式是用一个waitqueue，即wqh字段。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;yong-hu-tai-jie-kou&quot;&gt;用户态接口&lt;&#x2F;h1&gt;
&lt;p&gt;从man-pages中可以了解到，内核中提供了两个系统调用：eventfd和eventfd2。当eventfd2存在时，glibc默认使用eventfd2系统调用。这两个系统调用的区别是，eventfd2允许传入flags参数，而eventfd系统调用强制设置flags为0。在&lt;code&gt;fs&#x2F;eventfd.c&lt;&#x2F;code&gt;文件的末尾，我们可以找到这两个系统调用。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYSCALL_DEFINE2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(eventfd2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, flags)
{        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; fd, error;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file *file;
        error = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_unused_fd_flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(flags &amp;amp; EFD_SHARED_FCNTL_FLAGS);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(error &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error;
        fd = error;
        file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eventfd_file_create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count, flags);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IS_ERR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(file)) {
                error = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PTR_ERR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(file);
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; err_put_unused_fd;
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fd_install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(fd, file);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; fd;

err_put_unused_fd:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put_unused_fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(fd);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYSCALL_DEFINE1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(eventfd, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, count)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sys_eventfd2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单观察可以发现eventfd是eventfd2的简单包装（将flags设置为0），所以我们集中分析eventfd2做了什么。首先调用&lt;code&gt;get_unused_fd_flags&lt;&#x2F;code&gt;在当前进程中找来一个未使用的文件描述符并返回，同时设置其标志位。可以从eventfd.h文件中发现，&lt;code&gt;EFD_SHARED_FCNTL_FLAGS&lt;&#x2F;code&gt;实际上的定义如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;EFD_CLOEXEC			O_CLOEXEC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;EFD_NONBLOCK                    O_NONBLOCK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;EFD_SHARED_FCNTL_FLAGS		(O_NONBLOCK | O_CLOEXEC)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是说，eventfd的&lt;code&gt;EFD_NONBLOCK&lt;&#x2F;code&gt;和&lt;code&gt;EFD_CLOEXEC&lt;&#x2F;code&gt;与fcntl对应的&lt;code&gt;O_*&lt;&#x2F;code&gt;标志位是公用的。然后eventfd2系统调用又调用了&lt;code&gt;eventfd_file_create&lt;&#x2F;code&gt;创建了struct file结构体，最后使用fd_install函数将这个struct file结构体关联到当前的任务中。最后所有的问题都集中到了&lt;code&gt;eventfd_file_create&lt;&#x2F;code&gt;函数中，忽略掉一些sanity check，可以在&lt;code&gt;eventfd_file_create&lt;&#x2F;code&gt;函数中看到以下代码：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_file_create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file *file;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *ctx;
        ......
        ctx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kmalloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sizeof(*ctx), GFP_KERNEL);
        ......
        file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anon_inode_getfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[eventfd]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;eventfd_fops, ctx,
                                  O_RDWR | (flags &amp;amp; EFD_SHARED_FCNTL_FLAGS));
        ......
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即使用了比较常见的&lt;code&gt;anon_inode_getfile&lt;&#x2F;code&gt;函数创建了一个匿名的inode，打开这个inode得到struct file结构体，对应的fops为eventfd_fops。接下来分析这VFT中注册的回调函数的行为。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;eventfdde-hui-diao-han-shu&quot;&gt;eventfd的回调函数&lt;&#x2F;h1&gt;
&lt;p&gt;紧接上一节，我们得到了一个名为&lt;code&gt;eventfd_fops&lt;&#x2F;code&gt;的&lt;code&gt;file_operations&lt;&#x2F;code&gt;，如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file_operations eventfd_fops = {

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CONFIG_PROC_FS
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show_fdinfo    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= eventfd_show_fdinfo,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= eventfd_release,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poll           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= eventfd_poll,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= eventfd_read,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= eventfd_write,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;llseek         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= noop_llseek,
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;.llseek是一个空的占位函数，可以不去理会。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;release&quot;&gt;release&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_ctx_put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kref_put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;kref, eventfd_free);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; inode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *ctx = file-&amp;gt;private_data;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wake_up_poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh, POLLHUP);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eventfd_ctx_put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还是比较好懂的，首先使用POLLHUP作为key调用&lt;code&gt;wake_up_poll&lt;&#x2F;code&gt;唤醒waitqueue，然后将&lt;code&gt;eventfd_ctx&lt;&#x2F;code&gt;的引用计数减一。如果引用计数为0，那么就调用kfree直接释放掉&lt;code&gt;eventfd_ctx&lt;&#x2F;code&gt;占用的内存。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;du-qu-cao-zuo&quot;&gt;读取操作&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;eventfd_read&lt;&#x2F;code&gt;回调函数中并没有做太多事情，简单的检查了参数之后，就将所有工作委托给了&lt;code&gt;eventfd_ctx_read&lt;&#x2F;code&gt;函数。现在先描述一下这个函数的行为，然后解释它的实现细节。&lt;&#x2F;p&gt;
&lt;p&gt;函数首先根据传进来的no_wait参数确定是否应该做阻塞操作，阻塞停止的判断标准是&lt;code&gt;ctx-&amp;gt;count &amp;gt; 0&lt;&#x2F;code&gt;，也就是如果eventfd内部的计数器为大于0的话，就会停止阻塞。随后函数调用&lt;code&gt;eventfd_ctx_do_read&lt;&#x2F;code&gt;更新eventfd计数器的值，并根据ctx-&amp;gt;wqh是否正常工作以POLLOUT为参数调用&lt;code&gt;wake_up_locked_poll&lt;&#x2F;code&gt;函数通知还在ctx-&amp;gt;wqh上做poll操作的任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;eventfd_ctx_do_read&lt;&#x2F;code&gt;的行为比较简单：如果ctx-&amp;gt;flags中有EFD_SEMAPHORE标志，那么就将ctx-&amp;gt;count减去1，否则就清零。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_ctx_do_read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, __u64 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        *cnt = (ctx-&amp;gt;flags &amp;amp; EFD_SEMAPHORE) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: ctx-&amp;gt;count;
        ctx-&amp;gt;count -= *cnt;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到&lt;code&gt;eventfd_ctx&lt;&#x2F;code&gt;中没有自己的锁，所以它用的是wqh.lock这个spinlock，这个spinlock是与waitqueue共用的，所以&lt;code&gt;eventfd_ops.poll&lt;&#x2F;code&gt;操作的实现需要考虑很多data race出现的情况。为了实现等待操作，函数首先将自身任务放入ctx-&amp;gt;wqh中，然后进入一个死循环，在循环开始将自身运行状态设置为&lt;code&gt;TASK_INTERRUPTIBLE&lt;&#x2F;code&gt;，这标志着任务进入等待状态，并可以接收信号。接下来检查ctx-&amp;gt;count是否大于0，如果是则宣告等待结束。最后检测当前任务是否有到来的信号，如果有，那么此次等待操作失败，返回-ERESTARTSYS，文件系统层会重新进行此次操作。注意我们是不能拿着spinlock做上下文切换的，所以调用schedule前应该要把spinlock放回去，在schedule返回的时候再重新持有spinlock。死循环结束时，将当前任务从ctx-&amp;gt;wqh中移除，并重置当前运行状态为TASK_RUNNING。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;xie-ru-cao-zuo&quot;&gt;写入操作&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;eventfd_write&lt;&#x2F;code&gt;的实现和&lt;code&gt;eventfd_read&lt;&#x2F;code&gt;非常相似，没有什么需要过多解释的细节。&lt;code&gt;ctx-&amp;gt;count&lt;&#x2F;code&gt;可以保存的最大值是0xfffffffffffffffe即&lt;code&gt;UULONG_MAX-1&lt;&#x2F;code&gt;，每次&lt;code&gt;eventfd_write&lt;&#x2F;code&gt;操作会增加&lt;code&gt;ctx-&amp;gt;count&lt;&#x2F;code&gt;的值，如果ctx-&amp;gt;count的值增加之后会超过&lt;code&gt;UULONG_MAX-1&lt;&#x2F;code&gt;那么&lt;code&gt;eventfd_write&lt;&#x2F;code&gt;会根据&lt;code&gt;O_NONBLOCK&lt;&#x2F;code&gt;是否设置决定是阻塞等待还是直接返回&lt;code&gt;-EAGAIN&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pollcao-zuo&quot;&gt;POLL操作&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;eventfd_poll&lt;&#x2F;code&gt;函数看起来是最短最简单的一个，其实是最复杂的一个。前面提到，&lt;code&gt;eventfd_ctx&lt;&#x2F;code&gt;直接将&lt;code&gt;ctx-&amp;gt;wqh.lock&lt;&#x2F;code&gt;当作自己的锁，这与poll操作是冲突的，因为&lt;code&gt;poll_wait函数&lt;&#x2F;code&gt;会先获取&lt;code&gt;ctx-&amp;gt;wqh.lock&lt;&#x2F;code&gt;。为了保证函数功能正确，必须考虑所有情况。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static unsigned int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, poll_table *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *ctx = file-&amp;gt;private_data;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; events = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
        u64 count;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poll_wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(file, &amp;amp;ctx-&amp;gt;wqh, wait);
        count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;READ_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx-&amp;gt;count);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
                events |= POLLIN;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(count == ULLONG_MAX)
                events |= POLLERR;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ULLONG_MAX - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; count)
                events |= POLLOUT;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; events;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先可以确定的是，&lt;code&gt;eventfd_poll&lt;&#x2F;code&gt;不能像read和write那样在开头获取&lt;code&gt;ctx-&amp;gt;wqh.lock&lt;&#x2F;code&gt;。原因前面提到了，&lt;code&gt;poll_wait&lt;&#x2F;code&gt;里面调用了&lt;code&gt;add_wait_queue&lt;&#x2F;code&gt;，也会去拿这个spinlock。在已经持有锁的情况下再去获取这个锁，就会造成死锁。从代码中可以看到，从&lt;code&gt;poll_wait&lt;&#x2F;code&gt;以下的代码是没有锁保护的，这就需要确定所有情况保证代码不出现竞争。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;READ_ONCE&lt;&#x2F;code&gt;是一个特殊的宏，可以保证对&lt;code&gt;ctx-&amp;gt;count&lt;&#x2F;code&gt;的读取有且只有一次。由于指令重排的作用，这一行：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;READ_ONCE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx-&amp;gt;count);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可能会向上移动到&lt;code&gt;poll_wait&lt;&#x2F;code&gt;中的&lt;code&gt;add_wait_queue&lt;&#x2F;code&gt;的临界区里，但是不会移动到临界区之上。这是因为spinlock在ACCQUIRE操作时的语义隐含：所有在持有操作之后的内存操作都会在持有操作之后完成。翻译成白话就是在获取spinlock之后做的内存操作都不会重排到获取spinlock操作之前。可能出现的竞争为：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         *     poll                               write
         *     -----------------                  ------------
         *     lock ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(in poll_wait)
         *     count = ctx-&amp;gt;count
         *     __add_wait_queue
         *     unlock ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*                                        lock ctx-&amp;gt;qwh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*                                        ctx-&amp;gt;count += n
         *                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(waitqueue_active)
         *                                          wake_up_locked_poll
         *                                        unlock ctx-&amp;gt;qwh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*     eventfd_poll returns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个是安全的，因为write的&lt;code&gt;wake_up_locked_poll&lt;&#x2F;code&gt;函数还会把在poll的任务唤醒一次。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nei-he-tong-zhi-ji-zhi&quot;&gt;内核通知机制&lt;&#x2F;h1&gt;
&lt;p&gt;内核可以使用&lt;code&gt;eventfd_signal&lt;&#x2F;code&gt;函数从内核一侧实现write操作，可以使用&lt;code&gt;eventfd_etx_remove_wait_queue&lt;&#x2F;code&gt;实现内核端的read操作，代码比较简单：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;__u64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, __u64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flags;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_lock_irqsave&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, flags);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ULLONG_MAX - ctx-&amp;gt;count &amp;lt; n)
                n = ULLONG_MAX - ctx-&amp;gt;count;
        ctx-&amp;gt;count += n;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitqueue_active&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh))
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wake_up_locked_poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh, POLLIN);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_unlock_irqrestore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, flags);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; n;
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eventfd_ctx_remove_wait_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; eventfd_ctx *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, wait_queue_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                                  __u64 *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flags;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_lock_irqsave&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, flags);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eventfd_ctx_do_read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, cnt);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__remove_wait_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh, wait);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*cnt != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitqueue_active&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh))
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wake_up_locked_poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh, POLLOUT);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spin_unlock_irqrestore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ctx-&amp;gt;wqh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, flags);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*cnt != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: -EAGAIN;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
