<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - gnome</title>
	<link href="https://crab2313.github.io/tags/gnome/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-09-29T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/gnome/atom.xml</id>
	<entry xml:lang="en">
		<title>Mutter实现分析：Atomic Modesetting</title>
		<published>2020-09-29T00:00:00+00:00</published>
		<updated>2020-09-29T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/mutter-a-kms/" type="text/html"/>
		<id>https://crab2313.github.io/mutter-a-kms/</id>
		<content type="html">&lt;p&gt;首先注意一个名字上的区分，一开始看代码的人可能会对命名有疑惑。在Jonas的设计中，整个KMS相关代码分为两个上下文：main和impl。main上下文就是mutter运行的上下文，即GMainLoop所在线程，而impl上下文虽然目前也运行在GMainLoop所在线程，但是从设计上就是KMS操作运行的上下文，后期可能迁移到独立线程上。因此，所有命名为Impl的类都是注册在&lt;code&gt;Impl&lt;&#x2F;code&gt;上下文的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metakms&quot;&gt;MetaKms&lt;&#x2F;h2&gt;
&lt;p&gt;该对象为简单容器，是Jonas为了实现transactional modesetting对KMS进行的抽象。transactional KMS最终的目的有两个：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使mutter可以利用Atomic Modesetting API，更加充分高效的利用硬件特性，消除modesetting的中间状态&lt;&#x2F;li&gt;
&lt;li&gt;使KMS API的调用主体可以为独立线程，本质上是允许KMS API的异步调用，即调用时&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;首先明确其抽象的目标，即&lt;code&gt;transactional modesetting&lt;&#x2F;code&gt;，&lt;code&gt;transactional&lt;&#x2F;code&gt;这个词与数据库中的意义一致。即对于KMS设备进行的modesetting是原子性的，没有中间状态，要么成功要么失败，失败时不会进行任何状态更新。因此&lt;code&gt;MetaKms&lt;&#x2F;code&gt;使用&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;抽象一个&lt;code&gt;transaction&lt;&#x2F;code&gt;。这套抽象目前使用普通的KMS API实现，但是只要接口移植完毕，那么即可直接调用Atomic KMS实现对应的操作。因此&lt;code&gt;MetaKms&lt;&#x2F;code&gt;作为容器也有选择后端实现的功能，但是当前的实现都为普通KMS。&lt;&#x2F;p&gt;
&lt;p&gt;创建&lt;code&gt;MetaKms&lt;&#x2F;code&gt;对象时，需要传入一个&lt;code&gt;MetaBackend&lt;&#x2F;code&gt;，&lt;code&gt;meta_kms_new&lt;&#x2F;code&gt;函数会自行创建一个&lt;code&gt;MetaKmsImpl&lt;&#x2F;code&gt;对象：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  kms = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g_object_new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(META_TYPE_KMS, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  kms-&amp;gt;backend = backend;
  kms-&amp;gt;impl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;META_KMS_IMPL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_impl_simple_new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(kms, error))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;随后会从后端中取出&lt;code&gt;MetaUdev&lt;&#x2F;code&gt;对象，然后注册两个信号的处理函数，可以看出这是为了处理GPU热插拔事件：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  kms-&amp;gt;hotplug_handler_id =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g_signal_connect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(udev, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hotplug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;G_CALLBACK &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(on_udev_hotplug), kms);
  kms-&amp;gt;removed_handler_id =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g_signal_connect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(udev, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;device-removed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;G_CALLBACK &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(on_udev_device_removed), kms);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;metakmsupdate&quot;&gt;MetaKmsUpdate&lt;&#x2F;h2&gt;
&lt;p&gt;这个结构体是transactional KMS API设计的核心。其核心思想是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对显示控制器的操作（即modesetting）transaction化&lt;&#x2F;li&gt;
&lt;li&gt;每个&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;即代表一个transaction，操作时将所有操作缓存到&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;中&lt;&#x2F;li&gt;
&lt;li&gt;只有commit操作时，原先cache的操作才会真正应用到显示控制器中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，&lt;code&gt;MetaKms&lt;&#x2F;code&gt;会保存一个当前的&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;，所有需要进行的KMS操作都需要缓存到其中，然后在合适的时机进行commit。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_MetaKmsUpdate
{
  MetaKmsDevice *device;

  gboolean is_sealed;
  uint64_t sequence_number;

  MetaPowerSave power_save;
  GList *mode_sets;
  GList *plane_assignments;
  GList *connector_updates;
  GList *crtc_gammas;

  MetaKmsCustomPageFlipFunc custom_page_flip_func;
  gpointer custom_page_flip_user_data;

  GList *page_flip_listeners;
  GList *result_listeners;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在明白上述原理后，这个对象的表示也就比较容易理解了。首先&lt;code&gt;is_sealed&lt;&#x2F;code&gt;表示这个对象是否已经被封装好，即是否能够继续向其中添加操作。随后紧跟的是多个List，分别可以保存特定的一类操作。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MetaKms&lt;&#x2F;code&gt;提供了多个接口，用于创建、获取，并commit一个&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;MetaKmsUpdate * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meta_kms_ensure_pending_update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(MetaKms *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
MetaKmsUpdate * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meta_kms_get_pending_update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(MetaKms *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
MetaKmsFeedback * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meta_kms_post_pending_update_sync &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(MetaKms *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，&lt;code&gt;MetaKmsImpl&lt;&#x2F;code&gt;的实现的功能就显而易见了，即负责真正执行一个&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metakmsimpldevice&quot;&gt;MetaKmsImplDevice&lt;&#x2F;h2&gt;
&lt;p&gt;为了实现&lt;code&gt;Atomic Modesetting&lt;&#x2F;code&gt;，首先需要抽象一个&lt;code&gt;KMS&lt;&#x2F;code&gt;支持的操作。&lt;code&gt;MetaKmsImplDevice&lt;&#x2F;code&gt;抽象出了这个接口：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_MetaKmsImplDeviceClass
{
  GObjectClass parent_class;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(* setup_drm_event_context) (MetaKmsImplDevice *impl,
                                    drmEventContext   *drm_event_context);
  MetaKmsFeedback * (* process_update) (MetaKmsImplDevice *impl,
                                        MetaKmsUpdate     *update);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(* handle_page_flip_callback) (MetaKmsImplDevice   *impl,
                                      MetaKmsPageFlipData *page_flip_data);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(* discard_pending_page_flips) (MetaKmsImplDevice *impl);
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;并由&lt;code&gt;MetaKmsImplDeviceSimple&lt;&#x2F;code&gt;和&lt;code&gt;MetaKmsImplDeviceAtomic&lt;&#x2F;code&gt;实现。显然&lt;code&gt;handle_page_flip_callback&lt;&#x2F;code&gt;和&lt;code&gt;discard_pending_page_flips&lt;&#x2F;code&gt;与&lt;code&gt;process&lt;&#x2F;code&gt;被直接当作虚函数导出。另一个非常重要的操作是&lt;code&gt;dispatch&lt;&#x2F;code&gt;，实现如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  drm_event_context = (drmEventContext) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
  klass-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setup_drm_event_context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(impl_device, &amp;amp;drm_event_context);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drmHandleEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(priv-&amp;gt;fd, &amp;amp;drm_event_context) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
        {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看出，首先使用&lt;code&gt;setup_drm_event_context&lt;&#x2F;code&gt;回调函数设置好&lt;code&gt;drmEventContext&lt;&#x2F;code&gt;，本质上就是&lt;code&gt;page flip&lt;&#x2F;code&gt;的处理函数，在随后的&lt;code&gt;drmHandleEvent&lt;&#x2F;code&gt;中，如果出现&lt;code&gt;PageFlip&lt;&#x2F;code&gt;事件，则会调用&lt;code&gt;MetaKmsImplDeviceXXX&lt;&#x2F;code&gt;中设置好的&lt;code&gt;Page flip&lt;&#x2F;code&gt;处理函数进行处理。&lt;&#x2F;p&gt;
&lt;p&gt;除此之外比较有意思的是这个类保存了所有的DRM设备属性，也就是&lt;code&gt;connector&lt;&#x2F;code&gt;、&lt;code&gt;CRTC&lt;&#x2F;code&gt;等KMS接口导出的对象：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; _MetaKmsImplDevicePrivate
{
  MetaKmsDevice *device;
  MetaKmsImpl *impl;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; fd;
  GSource *fd_source;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*path;

  GList *crtcs;
  GList *connectors;
  GList *planes;

  MetaKmsDeviceCaps caps;

  GList *fallback_modes;
} MetaKmsImplDevicePrivate;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以在该类型的初始化函数中得到对应的初始化方式，且该类型的初始化函数中还隐藏了比较重要的信息：一个&lt;code&gt;GSource&lt;&#x2F;code&gt;，如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  priv-&amp;gt;fd_source =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_register_fd_in_impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_impl_get_kms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(priv-&amp;gt;impl), priv-&amp;gt;fd,
                                  kms_event_dispatch_in_impl,
                                  impl_device);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;本质上是在GMainContext中注册了一个&lt;code&gt;GSource&lt;&#x2F;code&gt;，以DRM的文件描述符的可读状态为事件源，以传入的&lt;code&gt;kms_event_dispatch_in_impl&lt;&#x2F;code&gt;函数作为&lt;code&gt;dispatch&lt;&#x2F;code&gt;回调函数。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; gpointer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;kms_event_dispatch_in_impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(MetaKmsImpl  *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                            gpointer      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                            GError      **&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
  MetaKmsImplDevice *impl_device = user_data;
  gboolean ret;

  ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_impl_device_dispatch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(impl_device, error);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GINT_TO_POINTER &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ret);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而在该函数中调用了&lt;code&gt;meta_kms_impl_device_dispatch&lt;&#x2F;code&gt;函数，除此之外别无它地。上述即为&lt;code&gt;Page Flip&lt;&#x2F;code&gt;的处理机制，从这里看，&lt;code&gt;MetaKmsImplDevice&lt;&#x2F;code&gt;一旦创建，即会注册&lt;code&gt;Page Flip&lt;&#x2F;code&gt;的处理函数，并进行处理。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metakmsimpldevicesimple&quot;&gt;MetaKmsImplDeviceSimple&lt;&#x2F;h2&gt;
&lt;p&gt;~~这个是目前mutter唯一实现的&lt;code&gt;MetaKmsImpl&lt;&#x2F;code&gt;，~~实质上是用普通KMS（即非atomic）操作实现transacational KMS的接口。可以预见，后续mutter项目会使用Atomic KMS接口实现一个&lt;code&gt;MetaKmsImplAtomic&lt;&#x2F;code&gt;，实现事实意义上的atomic KMS支持。&lt;&#x2F;p&gt;
&lt;p&gt;这里分析&lt;code&gt;MetaKmsImplSimple&lt;&#x2F;code&gt;几个比较复杂的操作。首先明确入口为&lt;code&gt;meta_kms_impl_simple_process_update&lt;&#x2F;code&gt;函数，其内部连续处理缓存在&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;中的KMS操作。简单的操作只是简单的wrap一个&lt;code&gt;drmMode*&lt;&#x2F;code&gt;函数，可以略过，直接分析最复杂的PageFlip处理。先看其缓存在&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;中的形式：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; _MetaKmsPageFlip
{
  MetaKmsCrtc *crtc;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; MetaKmsPageFlipFeedback *feedback;
  gpointer user_data;
  MetaKmsCustomPageFlipFunc custom_page_flip_func;
  gpointer custom_page_flip_user_data;
} MetaKmsPageFlip;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先理解&lt;code&gt;drmModePageFlip&lt;&#x2F;code&gt;函数，该函数与&lt;code&gt;drmModeSetCrtc&lt;&#x2F;code&gt;函数非常相似，只不过其只有在VBlank事件来了时才生效，也就是告诉DRM当VBlank事件到来时，更新framebuffer。我们可以将函数的flags参数传入&lt;code&gt;DRM_MODE_PAGE_FLIP_EVENT&lt;&#x2F;code&gt;，此时每当PageFlip发生时，都会产生一个PageFlip事件。事件通过drm文件描述符变为可读告知用户态，且我们可以使用&lt;code&gt;drmHandleEvent&lt;&#x2F;code&gt;处理事件。注意&lt;code&gt;drmModePageFlip&lt;&#x2F;code&gt;的最后一个参数为&lt;code&gt;user_data&lt;&#x2F;code&gt;，一个用户态指针，每当PageFlip事件生成时，对应的指针就会跟着传入&lt;code&gt;drmHandleEvent&lt;&#x2F;code&gt;函数，所以我们可以通过该指针辨别PageFlip。&lt;&#x2F;p&gt;
&lt;p&gt;接下来看&lt;code&gt;process_page_flip&lt;&#x2F;code&gt;函数，该函数是PageFlip处理的核心。首先可以知道&lt;code&gt;MetaKmsPageFlip&lt;&#x2F;code&gt;中提供了一个让调用方自己写PageFlip处理函数的机制，即对应于&lt;code&gt;custom_page_flip_func&lt;&#x2F;code&gt;函数指针和其对应的数据。当他们存在时，就通过它们进行PageFlip的处理，反之则使用标准的处理流程，即调用&lt;code&gt;drmModePageFlip&lt;&#x2F;code&gt;函数：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drmModePageFlip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(fd,
                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_crtc_get_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(crtc),
                             plane_assignment-&amp;gt;fb_id,
                             DRM_MODE_PAGE_FLIP_EVENT,
                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_page_flip_data_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(page_flip_data));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;page_flip_data&lt;&#x2F;code&gt;究竟记录了什么，目前不需要知道，到时候在分析mutter frame调度器的时候进行分析，目前只看到：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  page_flip_data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_kms_page_flip_data_new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(impl,
                                                crtc,
                                                page_flip-&amp;gt;feedback,
                                                page_flip-&amp;gt;user_data);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意&lt;code&gt;drmModePageFlip&lt;&#x2F;code&gt;函数在一个VBlank期间只能调用一次，在已经调用过一次的情况下再继续调用的话会返回&lt;code&gt;-EBUSY&lt;&#x2F;code&gt;。可以看到&lt;code&gt;process_page_flip&lt;&#x2F;code&gt;函数在该情况下实现了一个缓存机制，将返回&lt;code&gt;-EBUSY&lt;&#x2F;code&gt;的调用重新调度到下一次VBlank。这里只需要看到它是将多余的PageFlip计算出一个时间间隔，并缓存到了一张表内，其余细节在分析frame调度时再分析。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metakmsimpldeviceatomic&quot;&gt;MetaKmsImplDeviceAtomic&lt;&#x2F;h2&gt;
&lt;p&gt;半年之后jonas终于把&lt;code&gt;Atomic Modesetting&lt;&#x2F;code&gt;的支持做完了，不过熟悉GNOME的人都应该懂这个特性起码review半年以上，也就是mutter 40都不一定可以合入。前面提到&lt;code&gt;Atomic Modesetting&lt;&#x2F;code&gt;的支持就差最后一个&lt;code&gt;Buffer&lt;&#x2F;code&gt;，以前我对于DRM的理解没有那么深刻，结果误解了这个&lt;code&gt;Buffer&lt;&#x2F;code&gt;的含义。这个&lt;code&gt;Buffer&lt;&#x2F;code&gt;实质上是指&lt;code&gt;Buffer&lt;&#x2F;code&gt;更新，即设置CRTC的scanout。因此，需要定义一个&lt;code&gt;PlaneAssignment&lt;&#x2F;code&gt;用于抽象这个操作。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Atomic Modesetting&lt;&#x2F;code&gt;的实质是使用&lt;code&gt;Atomic API&lt;&#x2F;code&gt;替换掉原有的legacy接口，需要重新实现一个&lt;code&gt;MetaKmsImplDevice&lt;&#x2F;code&gt;，也就是&lt;code&gt;MetaKmsImplDeviceAtomic&lt;&#x2F;code&gt;。该函数的核心操作就是&lt;code&gt;process_update&lt;&#x2F;code&gt;，在进行这个操作时，首先自己是否已经初始化，如果没有初始化，则进行以下操作：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MetaKmsDevice里管理的所有connector的&lt;code&gt;CRTC_ID&lt;&#x2F;code&gt;属性设置为0&lt;&#x2F;li&gt;
&lt;li&gt;MetaKmsDevice里管理的所有plane的&lt;code&gt;CRTC_ID&lt;&#x2F;code&gt;与&lt;code&gt;FB_ID&lt;&#x2F;code&gt;设置为0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;随后则进行update操作，如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;依次处理&lt;code&gt;MetaKmsUpdate&lt;&#x2F;code&gt;中保存的信息，本质上就是更改对应Object里的属性&lt;&#x2F;li&gt;
&lt;li&gt;然后commit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;metakmsdevice&quot;&gt;MetaKmsDevice&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;del&gt;没意思。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有意思了，原先没有看到PageFlip事件的处理在&lt;code&gt;MetaKmsDevice&lt;&#x2F;code&gt;里，单纯以为其是drm设备文件描述符的容器。漏掉了最重要的函数&lt;code&gt;meta_kms_device_dispatch_sync&lt;&#x2F;code&gt;。先分析通用实现，然后再看&lt;code&gt;MetaKmsImplDevice&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到函数首先调用&lt;code&gt;MetaKmsImpl&lt;&#x2F;code&gt;的&lt;code&gt;meta_kms_impl_dispatch_idle&lt;&#x2F;code&gt;函数，后续调用了&lt;code&gt;MetaKmsImplDevice&lt;&#x2F;code&gt;实现的&lt;code&gt;dispatch&lt;&#x2F;code&gt;函数，中间穿插了&lt;code&gt;meta_kms_flush_callback&lt;&#x2F;code&gt;的调用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metacursorrenderer&quot;&gt;MetaCursorRenderer&lt;&#x2F;h2&gt;
&lt;p&gt;来看个比较独立也看起来比较简单的东西吧：鼠标光标绘制。首先看通用的抽象即&lt;code&gt;MetaCursorRender&lt;&#x2F;code&gt;。首先明确光标绘制的两种方式，硬件光标和软件光标。首先说软件光标，这个比较好理解，即直接在屏幕上进行光标的绘制，与绘制窗口无异。硬件光标则不同，目前的显示控制器一般都实现了cursor图层（plane），即屏幕的主图层和cursor图层是相互独立的，只有在scanout的时候才由硬件进行叠加操作。cursor图层一般支持绘制一块比较小的bitmap到屏幕上，而该bimtap可以在屏幕上快速移动。但是硬件实现的cursor图层是有局限性的，特定情况下并不能启用，所以mutter需要管理硬件cursor的启用。&lt;&#x2F;p&gt;
&lt;p&gt;事实上通过简单思考即抽象出Cursor管理需要向外提供的接口：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;光标（相对屏幕）位置的设置和获取&lt;&#x2F;li&gt;
&lt;li&gt;硬件光标的启用与停用管理&lt;&#x2F;li&gt;
&lt;li&gt;光标位图设置&lt;&#x2F;li&gt;
&lt;li&gt;光标更新（绘制）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;mutter使用&lt;code&gt;MetaCursorRender&lt;&#x2F;code&gt;抽象cursor的绘制器，而使用&lt;code&gt;MetaCursorSprite&lt;&#x2F;code&gt;描述光标图片（注意，这个可以是动画）。为了管理硬件cursor的启用条件，定义了&lt;code&gt;MetaHwCursorInhibitor&lt;&#x2F;code&gt;接口，实现了该接口的对象可以提供一个函数用于确定是否可以启用硬件cursor。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到&lt;code&gt;MetaCursorRender&lt;&#x2F;code&gt;向外提供的接口如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;set_curosr&#x2F;get_cursor，更换和获取`MetaCursorSprite（并绘制）&lt;&#x2F;li&gt;
&lt;li&gt;set_position&#x2F;get_position，更该和获取光标位置（并绘制）&lt;&#x2F;li&gt;
&lt;li&gt;force_update，强制重新绘制光标&lt;&#x2F;li&gt;
&lt;li&gt;{is，add，remove}_hw_cursor_inhibitor，向其注册删除&lt;code&gt;MetaHwCursorInhibitor&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先来看一下绘制光标的抽象接口：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cursor_sprite)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta_cursor_sprite_prepare_at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cursor_sprite,
                                   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) priv-&amp;gt;current_x,
                                   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) priv-&amp;gt;current_y);

  handled_by_backend =
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;META_CURSOR_RENDERER_GET_CLASS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(renderer)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update_cursor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(renderer,
                                                              cursor_sprite);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(handled_by_backend != priv-&amp;gt;handled_by_backend)
    {
      priv-&amp;gt;handled_by_backend = handled_by_backend;
      should_redraw = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是&lt;code&gt;meta_cursor_renderer_update_cursor&lt;&#x2F;code&gt;中的片段。其大致逻辑就是，如果子类实现的&lt;code&gt;update_cursor&lt;&#x2F;code&gt;函数没有处理光标绘制，则交由&lt;code&gt;MetaCursorRenderer&lt;&#x2F;code&gt;实现的软件绘制器进行光标绘制。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metadrmbuffer&quot;&gt;MetaDrmBuffer&lt;&#x2F;h2&gt;
&lt;p&gt;Buffer管理应该是transacational KMS最后一个还没有做的部分了。很明显一个&lt;code&gt;MetaDrmBuffer&lt;&#x2F;code&gt;对应一个DRM Buffer，且其只提供一个虚函数：&lt;code&gt;get_fb_id&lt;&#x2F;code&gt;。现在看到这个类有三个实现：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DUMB，这个就是那个几乎所有DRM驱动都支持的DUMB Buffer，不支持GPU加速，不看&lt;&#x2F;li&gt;
&lt;li&gt;GBM，这个应该是本地GPU通过libgbm分配出来的Buffer&lt;&#x2F;li&gt;
&lt;li&gt;Import，这个是其他GPU通过prime接口导出的Buffer，这个也暂时不看&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;MetaDrmBuffer&lt;&#x2F;code&gt;是一个抽象类，由于上面的&lt;code&gt;DUMB&lt;&#x2F;code&gt;和&lt;code&gt;Import&lt;&#x2F;code&gt;类型的Buffer都没有进一步分析的必要，所以这里主要分析&lt;code&gt;MetaDrmBufferGbm&lt;&#x2F;code&gt;。首先明确这个Buffer对应的是DRM中的Buffer概念，且是使用libgbm分配而出的Buffer，所以这一套API与EGL和DRM高度相关。&lt;code&gt;MetaDrmBufferGbm&lt;&#x2F;code&gt;提供了两个创建方法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;new_lock_front。该方法对应EGL中的&lt;code&gt;lock front buffer&lt;&#x2F;code&gt;操作，本质是锁定一个gbm_surface中的一个后端Buffer然后将其返回供用户操作。一旦完成操作则需要将该Buffer返还gbm_surface并解除锁定。&lt;&#x2F;li&gt;
&lt;li&gt;new_take。直接将一个&lt;code&gt;gbm_bo&lt;&#x2F;code&gt;包装成一个&lt;code&gt;MetaDrmBufferGbm&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;无论使用哪个方法进行创建，都需要使用&lt;code&gt;meta_gpu_kms_add_fb&lt;&#x2F;code&gt;将整个buffer注册到DRM中，并得到一个&lt;code&gt;framebuffer id&lt;&#x2F;code&gt;并保存起来。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
