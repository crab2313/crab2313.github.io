<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>crab2313&#x27;s blog - network</title>
	<link href="https://crab2313.github.io/tags/network/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://crab2313.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-03-08T00:00:00+00:00</updated>
	<id>https://crab2313.github.io/tags/network/atom.xml</id>
	<entry xml:lang="en">
		<title>Linux内核组播包接收流程分析</title>
		<published>2021-03-08T00:00:00+00:00</published>
		<updated>2021-03-08T00:00:00+00:00</updated>
		<link href="https://crab2313.github.io/multicast/" type="text/html"/>
		<id>https://crab2313.github.io/multicast/</id>
		<content type="html">&lt;p&gt;本文直接分析组播接收的流程细节。由于工作需要，暂且分析2.6.32内核的相关细节，并将分析文档记录于此。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qu-dong-ceng&quot;&gt;驱动层&lt;&#x2F;h2&gt;
&lt;p&gt;TCP&#x2F;IP协议栈是典型的tier架构，对于IP协议来说，其工作就是从链路层接收数据，然后对其进行处理，然后将数据传递给它的上一层协议。所以不难想象其在内核中的实现，即通过链路层的包中存在的某个字段确定该包为IPv4协议包，然后选择对应的handler进行处理。&lt;&#x2F;p&gt;
&lt;p&gt;IPv4包接收的核心逻辑是比较简明易懂的，时间紧张就不多讨论。首先明确驱动和内核网络子系统的界限，即一个sk_buff是如果通过驱动转交给内核的。目前内核保留了两套API，或者说机制，让驱动将接收到的数据包，或者说sk_buff，转交给内核网络子系统。一般称这两个API为legacy和NAPI，这二者的区别为前者是中断驱动的，而后者是中断与轮询机制相结合的。二者的接收入口分别为&lt;code&gt;netif_rx&lt;&#x2F;code&gt;以及&lt;code&gt;netif_receive_skb&lt;&#x2F;code&gt;。无论哪种情况下，网卡驱动都会自行选择一个API，并创建sk_buff，填入数据，然后通过选择的API将填好数据的sk_buff提交给内核（目前基本上都是用NAPI）。&lt;&#x2F;p&gt;
&lt;p&gt;也就是说，网卡驱动拥有提交sk_buff的自由。一个常见的例子就是网卡的混杂模式，该模式下网卡可以接收到链路中发送给所有地址的数据包，而不是仅仅接收自己绑定IP地址的数据包。这个模式就需要网卡驱动的相关配合。&lt;&#x2F;p&gt;
&lt;p&gt;对于以太网卡驱动，内核提供给其一个比较重要的helper函数就是&lt;code&gt;eth_type_trans&lt;&#x2F;code&gt;，该函数用于直接根据ethernet链路层报文header中的字段确定packet类型，并填充到&lt;code&gt;sk_buffer&lt;&#x2F;code&gt;的protocol字段中，同时对于组播包一个比较重要的细节就是该函数也根据报文链路地址设置设置&lt;code&gt;skb-&amp;gt;pkt_type&lt;&#x2F;code&gt;字段，即一个包的类型。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;__be16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;eth_type_trans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; net_device *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ethhdr *eth;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*rawp;

        skb-&amp;gt;dev = dev;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_reset_mac_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_pull&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb, ETH_HLEN);
        eth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eth_hdr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_multicast_ether_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(eth-&amp;gt;h_dest))) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compare_ether_addr_64bits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(eth-&amp;gt;h_dest, dev-&amp;gt;broadcast))
                        skb-&amp;gt;pkt_type = PACKET_BROADCAST;
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                        skb-&amp;gt;pkt_type = PACKET_MULTICAST;
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
         *      This ALLMULTI check should be redundant by 1.4
         *      so don&amp;#39;t forget to remove it.
         *
         *      Seems, you forgot to remove it. All silly devices
         *      seems to set IFF_PROMISC.
         *&#x2F;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*dev-&amp;gt;flags&amp;amp;IFF_PROMISC *&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compare_ether_addr_64bits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(eth-&amp;gt;h_dest, dev-&amp;gt;dev_addr)))
                        skb-&amp;gt;pkt_type = PACKET_OTHERHOST;
        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到&lt;code&gt;eth_trans_type&lt;&#x2F;code&gt;函数根据比较sk_buff接收网卡的MAC地址与接收包的目标MAC地址，确定该pkt_type的值。如果是广播地址则设置为&lt;code&gt;PACKET_BROADCAST&lt;&#x2F;code&gt;，组播则为&lt;code&gt;PACKET_MULTICAST&lt;&#x2F;code&gt;，而目的地非本网卡MAC地址的包则为&lt;code&gt;PACKET_OTHERHOST&lt;&#x2F;code&gt;类型（即网卡混杂模式下接收到的链路上目的地不是自己MAC的包）。注意可以从后面看到IP层根本不处理&lt;code&gt;PACKET_OTHERHOST&lt;&#x2F;code&gt;类型的包，而是直接丢弃，这个后面继续分析。&lt;&#x2F;p&gt;
&lt;p&gt;无论是legacy还是NAPI，其对驱动发送的sk_buff的处理都是相同的（甚至说legacy相关API在后期已经构建于NAPI之上）。这里主要分析&lt;code&gt;__netif_recieve_skb&lt;&#x2F;code&gt;函数，因为netif_rx也是实现在它之上。从内核的角度来看，驱动在其方便的时候调用了这个函数，即用调用这个函数的方式将自己准备好的sk_buff提交给内核。因此，内核首先要帮助处理和建立sk_buff的一些状态，即将sk_buff从链路层切换到网络层，简单来说就是设置一些字段，然后调整一下sk_buff中的数据指针，使其指向网络层的数据，具体细节可以研究一下&lt;code&gt;sk_buff&lt;&#x2F;code&gt;的实现。&lt;&#x2F;p&gt;
&lt;p&gt;从这里会碰到内核网络协议栈实现的一个典型pattern，即根据类型对包的分流处理，这也与网络协议的设计相符合。在网络多层设计中，一般情况下，位于位于底层的协议在封装上层协议的数据包时，都会在header中留有一个字段用户确定上层协议类型。例如，以太网的frame header中就留有字段确定该frame中传输的数据是ARP包还是IP包。内核对于该种设计的处理有一个特定的pattern，即定义一个通用的&lt;code&gt;type + handler&lt;&#x2F;code&gt;的数据结构，然后将其串起来，根据&lt;code&gt;type&lt;&#x2F;code&gt;寻找特定的handler。特化到L3（网络）层，该数据结构就是&lt;code&gt;struct packet_type&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;packet_type {
        __be16                  type;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* This is really htons(ether_type). *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;net_device       *dev;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* NULL is wildcarded here           *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*func) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *,
                                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; net_device *,
                                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; packet_type *,
                                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; net_device *);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sk_buff          *(*gso_segment)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sk_buff *skb,
                                                int features);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*gso_send_check)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *skb);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sk_buff          **(*gro_receive)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sk_buff **head,
                                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sk_buff *skb);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*gro_complete)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *skb);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*af_packet_priv;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; list_head        list;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一般情况下，我们只需要定义&lt;code&gt;type&lt;&#x2F;code&gt;和&lt;code&gt;func&lt;&#x2F;code&gt;回调函数。对于IPv4来说，定义如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; packet_type ip_packet_type __read_mostly = {
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cpu_to_be16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ETH_P_IP),
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= ip_rcv,
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;回到&lt;code&gt;__netif_receive_skb&lt;&#x2F;code&gt;函数的分析，前面提到&lt;code&gt;packet_type&lt;&#x2F;code&gt;是因为该函数对sk_buff的处理多处到了该结构体。除了前面提到的处理，函数还需要经过以下几个过程，这里简要提及：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ptype_all&lt;&#x2F;li&gt;
&lt;li&gt;handle_bridge&lt;&#x2F;li&gt;
&lt;li&gt;handle_macvlan&lt;&#x2F;li&gt;
&lt;li&gt;handle_openvswitch&lt;&#x2F;li&gt;
&lt;li&gt;ptype_base&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;其中ptype_all是内核注册的一组packet_type，使得用户态可以在这里截获特定的sk_buff，如tcpdump等工具就是通过这种方式实现的。中间几个函数的处理目前略过。函数最后从系统注册的&lt;code&gt;ptype_base&lt;&#x2F;code&gt;列表中找到&lt;code&gt;skb-&amp;gt;protocol&lt;&#x2F;code&gt;对应的handler，进而进行处理，对于IPv4协议就是前面看到的ip_packet_type，对应的回调函数为&lt;code&gt;ip_rcv&lt;&#x2F;code&gt;函数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ip-rcv&quot;&gt;ip_rcv&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;ip_rcv&lt;&#x2F;code&gt;位于&lt;code&gt;net&#x2F;ipv4&#x2F;ip_input.c&lt;&#x2F;code&gt;中，是IPv4协议输入包的入口。函数开头直接检测该包是否属于本机，也就是说整个IPv4协议栈不负责处理网卡混杂模式下接收到的其他额外的包（即目标地址非本机网卡MAC的包）：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* When the interface is in promisc. mode, drop all the crap
         * that it receives, do not try to analyse it.
         *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb-&amp;gt;pkt_type == PACKET_OTHERHOST)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; drop;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;随后函数增加IPv4收包计数器。函数对该包进行简单合法性检查后，将其扔进netfilter的&lt;code&gt;PRE_ROUTING&lt;&#x2F;code&gt;入口：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NF_HOOK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(PF_INET, NF_INET_PRE_ROUTING, skb, dev, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                       ip_rcv_finish);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里如果没有iptable规则将包偷走，那么则会传入到下一级&lt;code&gt;ip_rcv_finish&lt;&#x2F;code&gt;函数。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ip-rcv-finish&quot;&gt;ip_rcv_finish&lt;&#x2F;h2&gt;
&lt;p&gt;这个函数是IPv4包处理的中心，由于我们这个sk_buff是从网卡驱动来的，所以它是没有路由缓存的，而函数开头对该情况进行的处理，创建了一个路由表缓存条目。注意2.6.32内核比较古老，路由子系统还是使用的旧的基于路由缓存的实现，新版本内核已经改为基于字典树的路由表实现。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
         *      Initialise the virtual path cache for the packet. It describes
         *      how the packet travels inside Linux networking.
         *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; err = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_route_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb, iph-&amp;gt;daddr, iph-&amp;gt;saddr, iph-&amp;gt;tos,
                                         skb-&amp;gt;dev);
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlikely&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(err)) {
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(err == -EHOSTUNREACH)
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP_INC_STATS_BH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb-&amp;gt;dev),
                                                IPSTATS_MIB_INADDRERRORS);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(err == -ENETUNREACH)
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP_INC_STATS_BH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb-&amp;gt;dev),
                                                IPSTATS_MIB_INNOROUTES);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; drop;
                }
        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;事实上这个初始化路由表缓存条目的行为直接沟通了路由子系统，为该包决定好了去处，后续的任务仅仅是再次检查合法性，更新广播包与组播包的计数器：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(iph-&amp;gt;ihl &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_rcv_options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb))
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; drop;

        rt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_rtable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rt-&amp;gt;rt_type == RTN_MULTICAST) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP_UPD_PO_STATS_BH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rt-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), IPSTATS_MIB_INMCAST,
                                skb-&amp;gt;len);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rt-&amp;gt;rt_type == RTN_BROADCAST)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP_UPD_PO_STATS_BH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rt-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), IPSTATS_MIB_INBCAST,
                                skb-&amp;gt;len);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后将这个sk_buff扔到路由子系统中：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;lu-you-zi-xi-tong-xiang-guan&quot;&gt;路由子系统相关&lt;&#x2F;h2&gt;
&lt;p&gt;前面看到，由于我们扔给&lt;code&gt;ip_rcv_finish&lt;&#x2F;code&gt;的包是从网卡驱动直接创建的，所以没有路由缓存条目，需要通过路由子系统给其一个相关联的条目，该操作由&lt;code&gt;ip_route_input&lt;&#x2F;code&gt;函数实现，函数位于&lt;code&gt;net&#x2F;ipv4&#x2F;route.c&lt;&#x2F;code&gt;中。&lt;&#x2F;p&gt;
&lt;p&gt;首先明确函数的目的，即为什么要给一个sk_buff关联一个路由表缓存。IPv4协议中，IP包的路由是非常复杂的，尤其是涉及到具体实现的时候。当我们将一个IP包交给内核的时候，内核需要根据包中记录的相关信息（如源地址，目标地址，IPv4 options）确定该包是否合法，是否需要额外处理，以及其具体去处，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;FORWARD，即传递操作。默认情况下，内核不进行forward操作，否则，内核将自己不应该接收的包通过路由表的设置发送给下一级接收者&lt;&#x2F;li&gt;
&lt;li&gt;LOCAL DELIVERY，本地分发。内核认为该包是发给自己所运行的这台机器的，将会对其进行分发操作。其本质就是根据包的信息，将其分发给运行在操作系统下的应用程序。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对于我们正在分析的情况，这一套还是比较简单的，因为没有涉及复杂的路由处理逻辑。2.6.32内核的路由缓存实现原理比较简单，但是细节繁杂，其主要思路是通过一个哈希表保存多个条目，起到快速查找的作用，因为路由表性能直接影响内核对于IP包的处理速度。可以看到哈希函数的参数如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        hash = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(daddr, saddr, iif, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_genid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(net));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是IP包的源地址，目标地址，以及网络接口编号（索引）。函数进行处理时，首先检查路由表中是否已有匹配于该包的路由表项，简单来说，就是根据源地址，目标地址以及网络接口编号算出一个hash值，然后在路由表的哈希表中查找该哈希值是否有对应的表项，最后确定该表项是否适用于该包，如果适用，则将表项与sk_buff进行关联，此时一次查找完成，这个sk_buff就找到了去处。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        tos &amp;amp;= IPTOS_RT_MASK;
        hash = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(daddr, saddr, iif, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_genid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(net));

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_dereference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rt_hash_table[hash].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;); rth;
             rth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_dereference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rth-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(((rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fl4_dst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;^ daddr) |
                     (rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fl4_src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;^ saddr) |
                     (rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;^ iif) |
                     rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|
                     (rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fl4_tos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;^ tos)) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;&amp;amp;
                    rth-&amp;gt;fl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;== skb-&amp;gt;mark &amp;amp;&amp;amp;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net_eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rth-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), net) &amp;amp;&amp;amp;
                    !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt_is_expired&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rth)) {
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;rth-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, jiffies);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RT_CACHE_STAT_INC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(in_hit);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_dst_set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb, &amp;amp;rth-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RT_CACHE_STAT_INC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(in_hlist_search);
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面原理讲的这么简单，但是内核实际的实现是比较凌乱的。首先明确内核路由表使用了RCU实现，这是因为路由子系统现实中是具有一定容错率的，允许对路由表的更新滞后生效，这完美满足了RCU的使用场景。也就是说，已经拿到的路由表缓存不一定严格反映路由表的更改，有一个非常微小的窗口，使部分包看到的路由表仍然是旧的。&lt;&#x2F;p&gt;
&lt;p&gt;对于没有找到对应路由表缓存的情况，函数需要创建路由表缓存项。对于目标地址为组播地址的sk_buff，函数将该工作委托给&lt;code&gt;ip_route_input_mc&lt;&#x2F;code&gt;函数，在此之前，需要进行一个检查。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ipv4_is_multicast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(daddr)) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; in_device *in_dev;

                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((in_dev = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__in_dev_get_rcu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(dev)) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; our = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_check_mc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(in_dev, daddr, saddr,
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_hdr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb)-&amp;gt;protocol);
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(our
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CONFIG_IP_MROUTE
                            || (!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ipv4_is_local_multicast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(daddr) &amp;amp;&amp;amp;
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_DEV_MFORWARD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(in_dev))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_route_input_mc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb, daddr, saddr,
                                                         tos, dev, our);
                        }
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcu_read_unlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-EINVAL;
        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ip_check_mc&lt;&#x2F;code&gt;函数检查接收到该sk_buff的网卡是否注册到了该组播组中，如果没有则拒绝创建对应缓存表项，本质上就是拒绝接收。&lt;code&gt;ip_route_input_mc&lt;&#x2F;code&gt;函数的本质就是进行一系列合法性检查，并创建对应的路由表项，可以注意到：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(our) {
                rth-&amp;gt;u.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= ip_local_deliver;
                rth-&amp;gt;rt_flags |= RTCF_LOCAL;
        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于我们是link-local地址，所以our为1，因此路由表项指定的分发函数为&lt;code&gt;ip_local_deliver&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;从前面的&lt;code&gt;ip_rcv_finish&lt;&#x2F;code&gt;可以看到，函数最后调用&lt;code&gt;dst_input&lt;&#x2F;code&gt;进行分发，其本质就是调用该回调函数进行分发操作：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Input packet from network to transport.  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static inline int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dst_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb_dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;ip-local-deliver&quot;&gt;ip_local_deliver&lt;&#x2F;h2&gt;
&lt;p&gt;函数如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
 *      Deliver IP Packets to the higher protocol layers.
 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ip_local_deliver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sk_buff *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
         *      Reassemble IP fragments.
         *&#x2F;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_hdr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb)-&amp;gt;frag_off &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;htons&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(IP_MF | IP_OFFSET)) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_defrag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb, IP_DEFRAG_LOCAL_DELIVER))
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NF_HOOK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(PF_INET, NF_INET_LOCAL_IN, skb, skb-&amp;gt;dev, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                       ip_local_deliver_finish);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即如果IP包是分片的，则需要调用&lt;code&gt;ip_defrag&lt;&#x2F;code&gt;函数进行合并处理，我们这里假定是部分片的。因此这里碰到了netfilter的另一个钩子&lt;code&gt;INET_LOCAL_IN&lt;&#x2F;code&gt;，如果包没有被规则拐走，则交由&lt;code&gt;ip_local_deliver_finish&lt;&#x2F;code&gt;处理。在该函数中，通过检测IP头中的protocol字段，即可确定是UDP协议报文，进一步交由UDP协议进行处理：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                        ret = ipprot-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(skb);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; net_protocol udp_protocol = {
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=      udp_rcv,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err_handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=  udp_err,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;no_policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;netns_ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
